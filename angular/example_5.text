<div class="container">
  <table>
    <thead>
      <tr>
        <th>Models</th>
        <th>Connected Models</th>
        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let model of pagedModels">
        <td>{{ model.name }}</td>
        <td>{{ model.connected }}</td>
        <td><button (click)="addModel(model)">Add</button></td>
      </tr>
    </tbody>
  </table>

  <!-- Pagination controls -->
  <div class="pagination">
    <button (click)="previousPage()" [disabled]="currentPage === 1">Previous</button>
    
    <!-- Select Page Dropdown -->
    <label for="pageSelect">Page:</label>
    <select id="pageSelect" (change)="selectPage($event.target.value)">
      <option *ngFor="let page of totalPagesArray" [value]="page" [selected]="page === currentPage">{{ page }}</option>
    </select>
    
    <button (click)="nextPage()" [disabled]="currentPage === totalPages">Next</button>
  </div>
</div>



import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-models-table',
  templateUrl: './models-table.component.html',
  styleUrls: ['./models-table.component.css']
})
export class ModelsTableComponent implements OnInit {
  // Mock data for the table
  models = [
    { name: 'Azure OpenAI Service Model', connected: 10 },
    { name: 'Hugging Face', connected: 7 },
    { name: 'Anthropic', connected: 2 },
    { name: 'GCP Vertex AI', connected: 1 },
    { name: 'Cohere', connected: 0 },
    { name: 'Model X', connected: 3 },
    { name: 'Model Y', connected: 5 },
    { name: 'Model Z', connected: 8 },
    { name: 'Model A', connected: 2 },
    { name: 'Model B', connected: 9 }
    // Add more rows for testing pagination if needed
  ];

  // Pagination properties
  pagedModels: any[] = []; // Models to display on the current page
  currentPage: number = 1; // Current page
  pageSize: number = 3;  // Number of rows per page
  totalPages: number = 0; // Total number of pages
  totalPagesArray: number[] = []; // Array of total page numbers for select dropdown

  ngOnInit() {
    // Calculate total pages based on the number of models and the page size
    this.totalPages = Math.ceil(this.models.length / this.pageSize);

    // Create an array of total page numbers (e.g., [1, 2, 3, 4])
    this.totalPagesArray = Array.from({ length: this.totalPages }, (_, i) => i + 1);

    // Load the initial set of models for the first page
    this.updatePagedModels();
  }

  // Update the models to display on the current page
  updatePagedModels() {
    const startIndex = (this.currentPage - 1) * this.pageSize;
    const endIndex = startIndex + this.pageSize;
    this.pagedModels = this.models.slice(startIndex, endIndex);
  }

  // Move to the next page
  nextPage() {
    if (this.currentPage < this.totalPages) {
      this.currentPage++;
      this.updatePagedModels();
    }
  }

  // Move to the previous page
  previousPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
      this.updatePagedModels();
    }
  }

  // Select a specific page
  selectPage(page: number) {
    this.currentPage = +page;  // Convert string to number
    this.updatePagedModels();
  }

  // Placeholder function to handle model addition
  addModel(model: any) {
    console.log(`${model.name} model added`);
    // Implement logic to add the model here
  }
}



.container {
  width: 100%;
  max-width: 800px;
  margin: 0 auto;
  text-align: left;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

th, td {
  padding: 10px;
  border: 1px solid #ddd;
}

th {
  background-color: #f4f4f4;
}

button {
  background-color: #c4e2a8;
  border: none;
  padding: 8px 16px;
  cursor: pointer;
}

button:hover {
  background-color: #a6d091;
}

button[disabled] {
  background-color: #ddd;
  cursor: not-allowed;
}

.pagination {
  margin-top: 20px;
  text-align: center;
}

.pagination button {
  margin: 0 10px;
  padding: 5px 10px;
}

.pagination select {
  padding: 5px;
  margin-left: 10px;
}
