import { Component } from '@angular/core';

interface TreeNode {
  name: string;
  children?: TreeNode[];
  time?: string;
  expanded?: boolean;  // To handle the expansion state
}

@Component({
  selector: 'app-generation',
  templateUrl: './generation.component.html',
  styleUrls: ['./generation.component.css']
})
export class GenerationComponent {
  // Tree structure with nodes and time data
  treeData: TreeNode[] = [
    {
      name: 'Company financial statement',
      time: '15.12 Sec',
      expanded: true,
      children: [
        { name: 'RunnableSequence', time: '0.96 Sec' },
        { name: 'RunnableParallel', time: '9.96 Sec', expanded: true, children: [
          { name: 'RunnablePassthrough', time: '15.12 Sec' },
          { name: 'RunnableSequence', time: '15.12 Sec' },
          { name: 'VectorStoreRetriever', time: '15.12 Sec' },
          { name: 'format_docs', time: '15.12 Sec' }
        ]}
      ]
    },
    {
      name: 'PromptTemplate',
      time: '15.12 Sec',
      children: [
        { name: 'AzureChatOpenAI', time: '15.12 Sec' },
        { name: 'StrOutputParser', time: '11.12 Sec' }
      ]
    }
  ];

  // Toggle the expanded state of a node
  toggleNode(node: TreeNode): void {
    node.expanded = !node.expanded;
  }
}


<div class="generation-container">
  <header>
    <h1>Generation</h1>
    <div class="header-info">
      <p>Job ID: 908dkfj09dsfd93</p>
      <p>User ID: ActiveChatOpenAI</p>
      <p>Time: 4/5/2024, 10:47 PM</p>
    </div>
  </header>

  <!-- Sidebar with Tree View -->
  <aside class="sidebar">
    <ul class="tree-root">
      <li *ngFor="let node of treeData">
        <div class="tree-node">
          <button (click)="toggleNode(node)" class="expand-btn">
            {{ node.expanded ? '-' : '+' }}
          </button>
          {{ node.name }}
          <span class="time">{{ node.time }}</span>
        </div>
        <!-- Recursively display child nodes -->
        <ul *ngIf="node.children && node.expanded" class="tree-children">
          <li *ngFor="let child of node.children">
            <div class="tree-node">
              <button *ngIf="child.children" (click)="toggleNode(child)" class="expand-btn">
                {{ child.expanded ? '-' : '+' }}
              </button>
              {{ child.name }}
              <span class="time">{{ child.time }}</span>
            </div>
            <ul *ngIf="child.children && child.expanded" class="tree-children">
              <li *ngFor="let grandchild of child.children">
                <div class="tree-node">
                  {{ grandchild.name }}
                  <span class="time">{{ grandchild.time }}</span>
                </div>
              </li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </aside>

  <!-- Main Content (unchanged from earlier) -->
  <main>
    <!-- Content related to generation process -->
  </main>

  <!-- Scores Section (unchanged from earlier) -->
  <div class="scores-section">
    <!-- Scores content goes here -->
  </div>
</div>


.generation-container {
  display: grid;
  grid-template-columns: 1fr 3fr 1fr;
  grid-gap: 20px;
  padding: 20px;
}

header {
  grid-column: 1 / span 3;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  background-color: #f4f4f4;
}

.header-info p {
  margin: 0;
}

.sidebar {
  background-color: #f9f9f9;
  padding: 20px;
}

.tree-root, .tree-children {
  list-style-type: none;
  padding-left: 15px;
}

.tree-node {
  display: flex;
  align-items: center;
  padding: 5px 0;
}

.expand-btn {
  width: 20px;
  height: 20px;
  margin-right: 10px;
  background-color: transparent;
  border: none;
  font-size: 18px;
  line-height: 18px;
  cursor: pointer;
}

.time {
  margin-left: auto;
  color: gray;
  font-size: 12px;
}

.scores-section {
  background-color: #fafafa;
  padding: 20px;
  border-radius: 8px;
}
