<div class="pagination-container">
  <!-- Select Page Dropdown on the left -->
  <label for="pageSelect">Page:</label>
  <select id="pageSelect" (change)="selectPage($event)">
    <option *ngFor="let page of totalPagesArray" [value]="page.content" [selected]="page.selected">{{ page.content }}</option>
  </select>

  <!-- Page Information -->
  <span class="page-info">{{ startIndex + 1 }} - {{ endIndex }} of {{ totalItems }}</span>

  <!-- Pagination Controls -->
  <button (click)="previousPage()" [disabled]="currentPage === 1">Previous</button>
  <button (click)="nextPage()" [disabled]="currentPage === totalPages">Next</button>
</div>



import { Component, EventEmitter, Input, Output, OnChanges } from '@angular/core';

@Component({
  selector: 'app-pagination',
  templateUrl: './pagination.component.html',
  styleUrls: ['./pagination.component.css']
})
export class PaginationComponent implements OnChanges {
  @Input() totalItems: number = 0;  // Total number of items (e.g., 28 records)
  @Input() pageSize: number = 3;    // Number of records per page
  @Input() currentPage: number = 1; // Current page number

  @Output() pageChange = new EventEmitter<string>(); // Emit the page `content`

  totalPages: number = 0;
  totalPagesArray: { id: number, content: string, selected: boolean }[] = [];
  startIndex: number = 0;
  endIndex: number = 0;

  ngOnChanges() {
    // Recalculate total pages and start/end indices whenever totalItems or pageSize changes
    this.totalPages = Math.ceil(this.totalItems / this.pageSize);
    this.generatePages();
    this.updateRange();
  }

  // Generate the totalPagesArray
  generatePages() {
    this.totalPagesArray = [];
    for (let i = 1; i <= this.totalPages; i++) {
      this.totalPagesArray.push({
        id: i,
        content: `${i}`,  // Here the `content` is the page number, but it could be any string if needed
        selected: i === this.currentPage
      });
    }
  }

  // Update the range of records displayed on the current page
  updateRange() {
    this.startIndex = (this.currentPage - 1) * this.pageSize;
    this.endIndex = Math.min(this.startIndex + this.pageSize, this.totalItems);
  }

  // Go to the next page
  nextPage() {
    if (this.currentPage < this.totalPages) {
      this.currentPage++;
      this.updateSelection();
      this.updateRange();
    }
  }

  // Go to the previous page
  previousPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
      this.updateSelection();
      this.updateRange();
    }
  }

  // Select a specific page
  selectPage(event: Event) {
    const selectedContent = (event.target as HTMLSelectElement).value;
    const selectedPage = this.totalPagesArray.find(page => page.content === selectedContent)?.id || 1;
    
    this.currentPage = selectedPage;
    this.updateSelection();
    this.pageChange.emit(selectedContent); // Emit the `content` of the selected page
    this.updateRange();
  }

  // Update which page is selected
  updateSelection() {
    this.totalPagesArray.forEach(page => {
      page.selected = page.id === this.currentPage;
    });
  }
}
