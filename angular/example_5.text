import { Component, EventEmitter, Input, Output, OnChanges } from '@angular/core';

@Component({
  selector: 'app-pagination',
  templateUrl: './pagination.component.html',
  styleUrls: ['./pagination.component.css']
})
export class PaginationComponent implements OnChanges {
  @Input() totalItems: number = 0;  // Total number of items (e.g., 28 records)
  @Input() pageSize: number = 3;    // Number of records per page
  @Input() currentPage: number = 1; // Current page number

  @Output() pageChange = new EventEmitter<string>(); // Emit the page `content`

  totalPages: number = 0;
  totalPagesArray: { id: number; content: string; selected: boolean }[] = [];
  startIndex: number = 0;
  endIndex: number = 0;

  ngOnChanges() {
    // Recalculate total pages whenever totalItems or pageSize changes
    this.totalPages = Math.ceil(this.totalItems / this.pageSize);
    this.generatePages();
    this.updateSelection(); // Ensure selection is updated after generating pages
    this.updateRange(); // Update the range for displaying items
  }

  // Generate the totalPagesArray
  generatePages() {
    this.totalPagesArray = [];
    for (let i = 1; i <= this.totalPages; i++) {
      this.totalPagesArray.push({
        id: i,
        content: `${i}`,  // The `content` is the page number as a string
        selected: i === this.currentPage
      });
    }
  }

  // Update the range of records displayed on the current page
  updateRange() {
    this.startIndex = (this.currentPage - 1) * this.pageSize;
    this.endIndex = Math.min(this.startIndex + this.pageSize, this.totalItems);
  }

  // Go to the next page
  nextPage() {
    if (this.currentPage < this.totalPages) {
      this.currentPage++;
      this.updateSelection(); // Update selection before emitting
      this.updateRange(); // Update the range after changing the current page
      this.pageChange.emit(this.getCurrentPageObject().content); // Emit current page content
    }
  }

  // Go to the previous page
  previousPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
      this.updateSelection(); // Update selection before emitting
      this.updateRange(); // Update the range after changing the current page
      this.pageChange.emit(this.getCurrentPageObject().content); // Emit current page content
    }
  }

  // Select a specific page with the custom item object
  selectPage(item: { content: string; id: number; selected: boolean }) {
    this.currentPage = item.id; // Set the current page to the id from the item
    this.updateSelection(); // Update selection before emitting
    this.pageChange.emit(item.content); // Emit the `content` of the selected page
    this.updateRange(); // Update the range after selecting a new page
  }

  // Get the current page object based on the current page number
  getCurrentPageObject() {
    return this.totalPagesArray.find(page => page.id === this.currentPage);
  }

  // Update which page is selected
  updateSelection() {
    this.totalPagesArray.forEach(page => {
      page.selected = page.id === this.currentPage;
    });
  }
}
