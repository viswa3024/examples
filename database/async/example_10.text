pip install fastapi_sqlalchemy asyncpg


# main.py

from fastapi import FastAPI, Depends
from fastapi_sqlalchemy import DBSessionMiddleware, db
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# Database URL from environment variable
DATABASE_URL = os.getenv("DATABASE_URL")

# SQLAlchemy engine and session configuration
engine = create_async_engine(DATABASE_URL, echo=True)  # Echo SQL statements for debugging

# Session factory
AsyncSessionLocal = sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False
)

# Initialize FastAPI app
app = FastAPI()

# Add SQLAlchemy middleware to manage database sessions
app.add_middleware(DBSessionMiddleware, db_url=DATABASE_URL)

# Example FastAPI endpoints
@app.get("/")
async def read_root():
    return {"message": "Hello World"}

# Dependency to get SQLAlchemy async session
def get_db():
    db = AsyncSessionLocal()
    try:
        yield db
    finally:
        await db.close()

# Run FastAPI application with Uvicorn
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, debug=True)




from fastapi import FastAPI, Depends, HTTPException
from fastapi_sqlalchemy import db
from sqlalchemy.ext.asyncio import AsyncSession
from app import models, schemas

app = FastAPI()

@app.post("/users/", response_model=schemas.User)
async def create_user(user: schemas.UserCreate, db: AsyncSession = Depends(db.session)):
    db_user = models.User(name=user.name, email=user.email, hashed_password=user.password)
    db.add(db_user)
    await db.commit()
    await db.refresh(db_user)
    return db_user

@app.get("/users/{user_id}", response_model=schemas.User)
async def read_user(user_id: int, db: AsyncSession = Depends(db.session)):
    db_user = await db.get(models.User, user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user

You can now use the db object provided by fastapi_sqlalchemy to interact with the database within your FastAPI endpoint functions. Hereâ€™s an example of how you might implement a CRUD operation:


from fastapi import FastAPI, Depends, HTTPException
from fastapi_sqlalchemy import db
from sqlalchemy.ext.asyncio import AsyncSession
from app import models, schemas

app = FastAPI()

@app.post("/users/", response_model=schemas.User)
async def create_user(user: schemas.UserCreate, db: AsyncSession = Depends(db.session)):
    db_user = models.User(name=user.name, email=user.email, hashed_password=user.password)
    db.add(db_user)
    await db.commit()
    await db.refresh(db_user)
    return db_user

@app.get("/users/{user_id}", response_model=schemas.User)
async def read_user(user_id: int, db: AsyncSession = Depends(db.session)):
    db_user = await db.get(models.User, user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user
