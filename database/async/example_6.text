# app/crud.py

from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import SQLAlchemyError
from app.models import User, Item
from app.schemas import UserCreate, ItemCreate
from fastapi_sqlalchemy import db

async def get_user(user_id: int):
    async with db():
        async with db.session() as session:
            try:
                result = await session.execute(select(User).filter(User.id == user_id))
                return result.scalars().first()
            except SQLAlchemyError as e:
                # Handle or log the error appropriately
                print(f"Error fetching user: {e}")
                return None

async def get_user_by_email(email: str):
    async with db():
        async with db.session() as session:
            try:
                result = await session.execute(select(User).filter(User.email == email))
                return result.scalars().first()
            except SQLAlchemyError as e:
                # Handle or log the error appropriately
                print(f"Error fetching user by email: {e}")
                return None

async def create_user(user: UserCreate):
    async with db():
        async with db.session() as session:
            db_user = User(name=user.name, email=user.email, hashed_password=user.password)
            session.add(db_user)
            try:
                await session.commit()
                await session.refresh(db_user)
                return db_user
            except SQLAlchemyError as e:
                await session.rollback()  # Rollback the transaction on error
                # Handle or log the error appropriately
                print(f"Error creating user: {e}")
                return None

async def get_items(skip: int = 0, limit: int = 10):
    async with db():
        async with db.session() as session:
            try:
                result = await session.execute(select(Item).offset(skip).limit(limit))
                return result.scalars().all()
            except SQLAlchemyError as e:
                # Handle or log the error appropriately
                print(f"Error fetching items: {e}")
                return []

async def create_user_item(item: ItemCreate, user_id: int):
    async with db():
        async with db.session() as session:
            db_item = Item(**item.dict(), owner_id=user_id)
            session.add(db_item)
            try:
                await session.commit()
                await session.refresh(db_item)
                return db_item
            except SQLAlchemyError as e:
                await session.rollback()  # Rollback the transaction on error
                # Handle or log the error appropriately
                print(f"Error creating item: {e}")
                return None


# app/main.py

from fastapi import FastAPI, Depends, HTTPException
from typing import List
from fastapi_sqlalchemy import DBSessionMiddleware, db
from pydantic import BaseSettings

from app import crud, models, schemas

class Settings(BaseSettings):
    DATABASE_URL: str

    class Config:
        env_file = ".env"

settings = Settings()

app = FastAPI()

app.add_middleware(DBSessionMiddleware, db_url=settings.DATABASE_URL)

@app.post("/users/", response_model=schemas.User)
async def create_user(user: schemas.UserCreate):
    db_user = await crud.get_user_by_email(user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    created_user = await crud.create_user(user=user)
    if created_user is None:
        raise HTTPException(status_code=500, detail="Error creating user")
    return created_user

@app.get("/users/{user_id}", response_model=schemas.User)
async def read_user(user_id: int):
    db_user = await crud.get_user(user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user

@app.post("/users/{user_id}/items/", response_model=schemas.Item)
async def create_item_for_user(user_id: int, item: schemas.ItemCreate):
    created_item = await crud.create_user_item(item=item, user_id=user_id)
    if created_item is None:
        raise HTTPException(status_code=500, detail="Error creating item")
    return created_item

@app.get("/items/", response_model=List[schemas.Item])
async def read_items(skip: int = 0, limit: int = 10):
    items = await crud.get_items(skip=skip, limit=limit)
    return items

import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Use logger instead of print statements in CRUD operations


# app/crud.py

from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import SQLAlchemyError
from app.models import User, Item
from app.schemas import UserCreate, ItemCreate
from fastapi_sqlalchemy import db
import logging

logger = logging.getLogger(__name__)

async def get_user(user_id: int):
    async with db():
        async with db.session() as session:
            try:
                result = await session.execute(select(User).filter(User.id == user_id))
                return result.scalars().first()
            except SQLAlchemyError as e:
                logger.error(f"Error fetching user: {e}")
                return None

async def get_user_by_email(email: str):
    async with db():
        async with db.session() as session:
            try:
                result = await session.execute(select(User).filter(User.email == email))
                return result.scalars().first()
            except SQLAlchemyError as e:
                logger.error(f"Error fetching user by email: {e}")
                return None

async def create_user(user: UserCreate):
    async with db():
        async with db.session() as session:
            db_user = User(name=user.name, email=user.email, hashed_password=user.password)
            session.add(db_user)
            try:
                await session.commit()
                await session.refresh(db_user)
                return db_user
            except SQLAlchemyError as e:
                await session.rollback()
                logger.error(f"Error creating user: {e}")
                return None

async def get_items(skip: int = 0, limit: int = 10):
    async with db():
        async with db.session() as session:
            try:
                result = await session.execute(select(Item).offset(skip).limit(limit))
                return result.scalars().all()
            except SQLAlchemyError as e:
                logger.error(f"Error fetching items: {e}")
                return []

async def create_user_item(item: ItemCreate, user_id: int):
    async with db():
        async with db.session() as session:
            db_item = Item(**item.dict(), owner_id=user_id)
            session.add(db_item)
            try:
                await session.commit()
                await session.refresh(db_item)
                return db_item
            except SQLAlchemyError as e:
                await session.rollback()
                logger.error(f"Error creating item: {e}")
                return None
