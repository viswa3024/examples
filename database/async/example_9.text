project/
│
├── app/
│   ├── __init__.py
│   ├── main.py
│   ├── models.py
│   ├── crud.py
│   └── schemas.py
│
├── requirements.txt
└── .env


fastapi
uvicorn
sqlalchemy
asyncpg
pydantic

pip install -r requirements.txt


DATABASE_URL=postgresql+asyncpg://user:password@localhost/dbname


# app/models.py

from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    email = Column(String, unique=True, index=True)
    hashed_password = Column(String)

    items = relationship("Item", back_populates="owner")

class Item(Base):
    __tablename__ = "items"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(String, index=True)
    owner_id = Column(Integer, ForeignKey("users.id"))

    owner = relationship("User", back_populates="items")



# app/__init__.py

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy import event
from dotenv import load_dotenv
import os

# Load environment variables
load_dotenv()

# Database URL from environment variable
DATABASE_URL = os.getenv("DATABASE_URL")

# Create an async engine with connection pooling
engine = create_async_engine(
    DATABASE_URL,
    pool_size=20,
    max_overflow=10,
    pool_timeout=30,
    pool_recycle=3600
)

# Create a session factory
AsyncSessionLocal = sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False
)

# Example of event listener
@event.listens_for(engine, "before_cursor_execute")
def before_cursor_execute(conn, cursor, statement, parameters, context, executemany):
    print(f"Executing statement: {statement}")

# Ensure tables are created
from . import models
models.Base.metadata.create_all(bind=engine)



# app/schemas.py

from pydantic import BaseModel
from typing import List, Optional

class ItemBase(BaseModel):
    title: str
    description: Optional[str] = None

class ItemCreate(ItemBase):
    pass

class Item(ItemBase):
    id: int
    owner_id: int

    class Config:
        orm_mode = True

class UserBase(BaseModel):
    name: str
    email: str

class UserCreate(UserBase):
    password: str

class User(UserBase):
    id: int
    items: List[Item] = []

    class Config:
        orm_mode = True



# app/crud.py

from sqlalchemy.future import select
from sqlalchemy.exc import SQLAlchemyError
from app.models import User, Item
from app.schemas import UserCreate, ItemCreate
from app import models, schemas, db

async def get_user(user_id: int):
    async with db.engine.connect() as conn:
        try:
            query = select(User).filter(User.id == user_id)
            result = await conn.execute(query)
            return result.scalars().first()
        except SQLAlchemyError as e:
            print(f"Error fetching user: {e}")
            return None

async def create_user(user: UserCreate):
    async with db.AsyncSessionLocal() as session:
        try:
            db_user = models.User(name=user.name, email=user.email, hashed_password=user.password)
            session.add(db_user)
            await session.commit()
            await session.refresh(db_user)
            return db_user
        except SQLAlchemyError as e:
            print(f"Error creating user: {e}")
            await session.rollback()
            return None

async def get_items(skip: int = 0, limit: int = 10):
    async with db.AsyncSessionLocal() as session:
        try:
            query = select(Item).offset(skip).limit(limit)
            result = await session.execute(query)
            return result.scalars().all()
        except SQLAlchemyError as e:
            print(f"Error fetching items: {e}")
            return []

async def create_user_item(item: ItemCreate, user_id: int):
    async with db.AsyncSessionLocal() as session:
        try:
            db_item = models.Item(**item.dict(), owner_id=user_id)
            session.add(db_item)
            await session.commit()
            await session.refresh(db_item)
            return db_item
        except SQLAlchemyError as e:
            print(f"Error creating item: {e}")
            await session.rollback()
            return None




# app/main.py

from fastapi import FastAPI, HTTPException, Depends
from typing import List
from app import crud, schemas
from app.db import get_db

app = FastAPI()

@app.post("/users/", response_model=schemas.User)
async def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    db_user = await crud.get_user_by_email(db, user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="Email already registered")
    return await crud.create_user(db=db, user=user)

@app.get("/users/{user_id}", response_model=schemas.User)
async def read_user(user_id: int, db: Session = Depends(get_db)):
    db_user = await crud.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user

@app.get("/items/", response_model=List[schemas.Item])
async def read_items(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    items = await crud.get_items(db, skip=skip, limit=limit)
    return items
