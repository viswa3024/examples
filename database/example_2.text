When choosing between asyncpg (with the databases package) and psycopg2-binary for interacting with PostgreSQL in a FastAPI application, itâ€™s important to understand their differences, strengths, and use cases.

databases[asyncpg]
Advantages:

Asynchronous: asyncpg is designed for asynchronous programming, which allows for non-blocking I/O operations. This can lead to better performance in applications that need to handle many concurrent database connections.
Performance: asyncpg is optimized for performance and can handle large volumes of data efficiently.
Integration: The databases package provides an abstraction layer over asyncpg (and other async database drivers), making it easy to use with async web frameworks like FastAPI.
Concurrency: Ideal for applications that require high concurrency, such as web APIs with many simultaneous requests.
Example Usage:

db_config.py

from databases import Database
from pydantic import BaseSettings

# Database settings
class Settings(BaseSettings):
    database_url: str = "postgresql://user:password@localhost/dbname"

# Create an instance of the Settings class
settings = Settings()

# Database configuration
database = Database(settings.database_url)


main.py

from fastapi import FastAPI
from .db_config import database
from .endpoints import router

app = FastAPI()

@app.on_event("startup")
async def startup():
    await database.connect()

@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()

app.include_router(router)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

endpoints.py

from fastapi import APIRouter
from sqlalchemy import select
from .db_config import database
from .models import MyModel  # Define your SQLAlchemy models

router = APIRouter()

@router.get("/")
async def read_root():
    query = select(MyModel)
    results = await database.fetch_all(query)
    return results

@router.post("/items/")
async def create_item(name: str):
    query = MyModel.__table__.insert().values(name=name)
    await database.execute(query)
    return {"name": name}



psycopg2-binary
Advantages:

Stability and Maturity: psycopg2 is the most widely used PostgreSQL adapter for Python. It's stable and has a rich feature set.
Synchronous: While synchronous, it is perfectly suited for applications that do not require handling a large number of concurrent database connections.
Ease of Use: It's straightforward to use with SQLAlchemy for ORM support.
Example Usage:

db_config.py


from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from pydantic import BaseSettings

# Database settings
class Settings(BaseSettings):
    database_url: str = "postgresql://user:password@localhost/dbname"

# Create an instance of the Settings class
settings = Settings()

# Base class for our models
Base = declarative_base()

# Database configuration
engine = create_engine(settings.database_url)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


main.py

from fastapi import FastAPI
from .db_config import engine
from .endpoints import router

app = FastAPI()

@app.on_event("startup")
def startup():
    # Any additional startup code
    pass

@app.on_event("shutdown")
def shutdown():
    engine.dispose()

app.include_router(router)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)


endpoints.py

from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from .db_config import SessionLocal
from .models import MyModel  # Define your SQLAlchemy models

router = APIRouter()

# Dependency to get the database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@router.get("/")
def read_root(db: Session = Depends(get_db)):
    items = db.query(MyModel).all()
    return items

@router.post("/items/")
def create_item(name: str, db: Session = Depends(get_db)):
    new_item = MyModel(name=name)
    db.add(new_item)
    db.commit()
    db.refresh(new_item)
    return new_item


Choosing Between Them
Use databases[asyncpg] if:

You need to handle a high number of concurrent connections.
You are building an application that benefits from asynchronous I/O, such as a high-performance web API.
Use psycopg2-binary if:

Your application does not require handling many concurrent database connections.
You prefer a mature, stable, and synchronous approach.
You are already using SQLAlchemy and prefer sticking to synchronous database operations.
In summary, choose databases[asyncpg] for asynchronous operations and high concurrency needs, and choose psycopg2-binary for stability and ease of use with synchronous operations.
