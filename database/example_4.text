from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.future import select
import asyncio

# SQLAlchemy models
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    email = Column(String, unique=True, index=True)

# Database configuration
SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"

# Synchronous engine and session setup
engine = create_engine(SQLALCHEMY_DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Asynchronous engine and session setup
async_engine = create_async_engine(SQLALCHEMY_DATABASE_URL, echo=True)
async_session = sessionmaker(async_engine, expire_on_commit=False, class_=AsyncSession)

# FastAPI app instance
app = FastAPI()

# Dependency to get synchronous session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Dependency to get asynchronous session
async def get_async_db():
    async_session_ = None
    try:
        async_session_ = async_session()
        yield async_session_
    finally:
        if async_session_:
            await async_session_.close()

# FastAPI endpoints
@app.post("/create_user/")
def create_user(name: str, email: str, db: Session = Depends(get_db)):
    try:
        user = User(name=name, email=email)
        db.add(user)
        db.commit()
        db.refresh(user)
        return {"message": "User created successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/get_users/")
async def get_users(background_tasks: BackgroundTasks, db: Session = Depends(get_db)):
    users = db.execute(select(User)).scalars().all()
    background_tasks.add_task(some_background_task)
    return users

async def some_background_task():
    await asyncio.sleep(5)
    print("Background task executed")

# Asynchronous endpoints using async session
@app.post("/create_user_async/")
async def create_user_async(name: str, email: str, db: Session = Depends(get_async_db)):
    try:
        user = User(name=name, email=email)
        db.add(user)
        await db.commit()
        await db.refresh(user)
        return {"message": "User created successfully"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/get_users_async/")
async def get_users_async(db: Session = Depends(get_async_db)):
    users = await db.execute(select(User)).scalars().all()
    return users
