from fastapi import FastAPI, HTTPException, Depends
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.ext.declarative import declarative_base

# DBConfig class for database configuration
class DBConfig:
    def __init__(self, db_url: str):
        self.engine = create_engine(db_url)
        self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)

# Repository class for database operations
class Repository:
    def __init__(self, db_config: DBConfig):
        self.db_config = db_config

    def get_db(self):
        db = self.db_config.SessionLocal()
        try:
            yield db
        finally:
            db.close()

    def create_user(self, db: Session, name: str, email: str):
        try:
            user = User(name=name, email=email)
            db.add(user)
            db.commit()
            db.refresh(user)
            return {"message": "User created successfully"}
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))

    def get_users(self, db: Session):
        users = db.query(User).all()
        return users

# Endpoint class for FastAPI endpoints
class Endpoint:
    def __init__(self, repository: Repository):
        self.repository = repository
        self.app = FastAPI()

    def setup_routes(self):
        @self.app.post("/create_user/")
        def create_user(name: str, email: str, db: Session = Depends(self.repository.get_db)):
            return self.repository.create_user(db, name, email)

        @self.app.get("/get_users/")
        def get_users(db: Session = Depends(self.repository.get_db)):
            return self.repository.get_users(db)

# SQLAlchemy models
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    email = Column(String, unique=True, index=True)

# Example usage:
if __name__ == "__main__":
    db_config = DBConfig("sqlite:///./test.db")
    repository = Repository(db_config)
    endpoint = Endpoint(repository)
    endpoint.setup_routes()

    import uvicorn
    uvicorn.run(endpoint.app, host="127.0.0.1", port=8000)
