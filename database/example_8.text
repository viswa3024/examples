from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, scoped_session

class DBConfig:
    def __init__(self, db_url: str):
        self.engine = create_engine(db_url, pool_pre_ping=True)
        self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)
        self.ScopedSession = scoped_session(self.SessionLocal)
        self.Base = declarative_base()

    def get_session(self):
        return self.ScopedSession()

    def get_engine(self):
        return self.engine



from sqlalchemy.orm import Session
from .models import User

class Repository:
    def __init__(self, db_config):
        self.db_config = db_config

    def create_user(self, db: Session, name: str, email: str):
        user = User(name=name, email=email)
        db.add(user)
        db.commit()
        db.refresh(user)
        return user

    def get_users(self, db: Session):
        return db.query(User).all()


from fastapi import FastAPI, Depends
from sqlalchemy.orm import Session
from .db_config import DBConfig
from .service import Service

class UserEndpoints:
    def __init__(self, db_config: DBConfig):
        self.db_config = db_config
        self.service = Service(Repository(db_config))

    def get_db(self):
        db = None
        try:
            db = self.db_config.get_session()
            yield db
        finally:
            db.close()

    def setup_routes(self, app: FastAPI):
        @app.post("/create_user/")
        def create_user(name: str, email: str, db: Session = Depends(self.get_db)):
            return self.service.create_user(name, email, db)

        @app.get("/get_users/")
        def get_users(db: Session = Depends(self.get_db)):
            return self.service.get_users(db)
