@keyframes typewriter {
  from { width: 0; }
  to { width: 100%; }
}

@keyframes blink {
  0% { border-right-color: rgba(0,0,0,.75); }
  50% { border-right-color: transparent; }
  100% { border-right-color: rgba(0,0,0,.75); }
}

.typewriter-container {
  display: inline-block;
  overflow: hidden; /* Ensures the text does not wrap */
  border-right: .15em solid black; /* The cursor */
  white-space: nowrap; /* Keeps the content on a single line */
  animation: typewriter 4s steps(40, end), blink .75s step-end infinite;
}


import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import './Typewriter.css'; // Assuming the CSS is saved in Typewriter.css

const Typewriter = ({ content }) => {
  const [displayedContent, setDisplayedContent] = useState('');

  useEffect(() => {
    let timeout;
    if (displayedContent.length < content.length) {
      timeout = setTimeout(() => {
        setDisplayedContent(content.substring(0, displayedContent.length + 1));
      }, 100); // Adjust the speed of the typewriter effect here
    }
    return () => clearTimeout(timeout);
  }, [displayedContent, content]);

  return (
    <div className="typewriter-container">
      <ReactMarkdown>{displayedContent}</ReactMarkdown>
    </div>
  );
};

export default Typewriter;


import React from 'react';
import Typewriter from './Typewriter';

const App = () => {
  const markdownContent = `
    # Hello World
    This is a typewriter effect with react-markdown.
  `;

  return (
    <div>
      <Typewriter content={markdownContent} />
    </div>
  );
};

export default App;























import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import './Typewriter.css';

const Typewriter = ({ content }) => {
  const [displayedContent, setDisplayedContent] = useState('');
  const [isTyping, setIsTyping] = useState(true);

  useEffect(() => {
    let timeout;
    if (displayedContent.length < content.length) {
      timeout = setTimeout(() => {
        setDisplayedContent(content.substring(0, displayedContent.length + 1));
      }, 100); // Adjust the speed of the typewriter effect here
    } else {
      setIsTyping(false);
    }
    return () => clearTimeout(timeout);
  }, [displayedContent, content]);

  return (
    <div className="typewriter-container">
      <ReactMarkdown>{displayedContent}</ReactMarkdown>
      {isTyping && <span className="cursor">|</span>}
    </div>
  );
};

export default Typewriter;


@keyframes blink {
  0% { border-right-color: rgba(0,0,0,.75); }
  50% { border-right-color: transparent; }
  100% { border-right-color: rgba(0,0,0,.75); }
}

.typewriter-container {
  display: inline-block;
  overflow: hidden; /* Ensures the text does not wrap */
  white-space: nowrap; /* Keeps the content on a single line */
  position: relative;
}

.cursor {
  display: inline-block;
  margin-left: 2px;
  border-right: .1em solid black;
  animation: blink .75s step-end infinite;
}



import React from 'react';
import Typewriter from './Typewriter';

const App = () => {
  const markdownContent = `
    # Hello World
    This is a typewriter effect with react-markdown.
  `;

  return (
    <div>
      <Typewriter content={markdownContent} />
    </div>
  );
};

export default App;




@keyframes blink {
  0% { opacity: 1; }
  50% { opacity: 0; }
  100% { opacity: 1; }
}

.typewriter-container {
  display: inline-block;
  overflow: hidden; /* Ensures the text does not wrap */
  white-space: nowrap; /* Keeps the content on a single line */
  position: relative;
}

.cursor {
  display: inline-block;
  opacity: 0;
  animation: blink 0.75s step-end infinite;
}

.typewriter-container:hover .cursor {
  opacity: 1;
}










import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import './Typewriter.css';

const Typewriter = ({ content }) => {
  const [displayedContent, setDisplayedContent] = useState('');
  const [isTyping, setIsTyping] = useState(true);

  useEffect(() => {
    let textPosition = 0;
    const speed = 100; // Adjust the typing speed as needed

    const typeWriter = () => {
      setDisplayedContent(content.substring(0, textPosition) + (textPosition === content.length ? '' : '<span id="blinker">&#9646;</span>'));
      if (textPosition < content.length) {
        textPosition++;
        setTimeout(typeWriter, speed);
      } else {
        setIsTyping(false);
      }
    };

    typeWriter();

    return () => {
      // Cleanup if component unmounts while typing
      setIsTyping(false);
    };
  }, [content]);

  return (
    <div className="typewriter-container">
      <ReactMarkdown>{displayedContent}</ReactMarkdown>
    </div>
  );
};

export default Typewriter;







import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import './Typewriter.css';

const Typewriter = ({ content }) => {
  const [displayedContent, setDisplayedContent] = useState('');
  const [isTyping, setIsTyping] = useState(true);

  useEffect(() => {
    let textPosition = 0;
    const speed = 100; // Adjust the typing speed as needed

    const typeWriter = () => {
      const textToShow = content.substring(0, textPosition);
      const blinkingCursor = textPosition === content.length ? '' : '<span id="blinker">&#9646;</span>';
      setDisplayedContent(textToShow + blinkingCursor);

      if (textPosition < content.length) {
        textPosition++;
        setTimeout(typeWriter, speed);
      } else {
        setIsTyping(false);
      }
    };

    typeWriter();

    return () => {
      // Cleanup if component unmounts while typing
      setIsTyping(false);
    };
  }, [content]);

  return (
    <div className="typewriter-container">
      <ReactMarkdown>{displayedContent}</ReactMarkdown>
    </div>
  );
};

export default Typewriter;



const blinkingCursor = displayedContent.length === content.length ? (
  <svg width="8" height="8" viewBox="0 0 8 8" fill="none" xmlns="http://www.w3.org/2000/svg">
    <circle cx="4" cy="4" r="3" fill="#000" />
    <circle cx="4" cy="4" r="3.5" stroke="#000" />
  </svg>
) : '';

â€¢
