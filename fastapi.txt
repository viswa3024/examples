from fastapi import FastAPI
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup code
    print("Starting up...")
    yield
    # Shutdown code
    print("Shutting down...")

app = FastAPI(lifespan=lifespan)


from fastapi import FastAPI
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup code
    print("Starting up...")
    yield
    # Shutdown code
    print("Shutting down...")

app = FastAPI(lifespan=lifespan)

@app.get("/")
async def read_root():
    return {"Hello": "World"}


from fastapi import FastAPI
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Accessing the app instance to add a startup message
    print("Starting up...")

    # You can modify the app instance here if needed
    app.state.some_state = "This is some state data"

    yield  # This point is where the lifespan of the app is active

    # Accessing the app instance to add a shutdown message
    print("Shutting down...")

    # Clean up or modify the app state on shutdown
    del app.state.some_state

app = FastAPI(lifespan=lifespan)

@app.get("/")
async def read_root():
    # Accessing the app state within a route
    some_state = app.state.some_state
    return {"Hello": "World", "state": some_state}



from fastapi import FastAPI, APIRouter, Depends, Request
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup code
    print("Starting up...")
    app.state.some_state = "This is some state data"
    yield
    # Shutdown code
    print("Shutting down...")
    del app.state.some_state

app = FastAPI(lifespan=lifespan)

router = APIRouter()

def get_app_state(request: Request):
    return request.app.state.some_state

@router.get("/router-endpoint")
async def read_router_endpoint(state_data: str = Depends(get_app_state)):
    return {"Router Endpoint State": state_data}

app.include_router(router)

@app.get("/")
async def read_root(state_data: str = Depends(get_app_state)):
    return {"Hello": "World", "State": state_data}


pip install pydantic-settings


from pydantic_settings import BaseSettings


from pydantic import BaseSettings

class Settings(BaseSettings):
    app_name: str = "MyApp"
    admin_email: str

    class Config:
        env_file = ".env"

settings = Settings()



from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    app_name: str = "MyApp"
    admin_email: str

    class Config:
        env_file = ".env"

settings = Settings()



Updating @validator to @field_validator

Before (Pydantic v1.x)

from pydantic import BaseModel, validator

class UserModel(BaseModel):
    name: str
    age: int

    @validator('name')
    def name_must_have_space(cls, v):
        if ' ' not in v:
            raise ValueError('must contain a space')
        return v

    @validator('age')
    def age_must_be_positive(cls, v):
        if v <= 0:
            raise ValueError('must be positive')
        return v


After (Pydantic v2.x)

from pydantic import BaseModel, field_validator

class UserModel(BaseModel):
    name: str
    age: int

    @field_validator('name')
    def name_must_have_space(cls, v):
        if ' ' not in v:
            raise ValueError('must contain a space')
        return v

    @field_validator('age')
    def age_must_be_positive(cls, v):
        if v <= 0:
            raise ValueError('must be positive')
        return v


Updating @root_validator to @model_validator

Before (Pydantic v1.x)


from pydantic import BaseModel, root_validator

class UserModel(BaseModel):
    name: str
    age: int

    @root_validator
    def check_name_and_age(cls, values):
        name = values.get('name')
        age = values.get('age')
        if ' ' not in name:
            raise ValueError('name must contain a space')
        if age <= 0:
            raise ValueError('age must be positive')
        return values


After (Pydantic v2.x)

from pydantic import BaseModel, model_validator

class UserModel(BaseModel):
    name: str
    age: int

    @model_validator(mode='after')
    def check_name_and_age(cls, values):
        name = values.name
        age = values.age
        if ' ' not in name:
            raise ValueError('name must contain a space')
        if age <= 0:
            raise ValueError('age must be positive')
        return values


from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# Step 1: Define your database URL
DATABASE_URL = "sqlite:///example.db"  # Replace with your actual database URL

# Step 2: Create an engine
engine = create_engine(DATABASE_URL)

# Step 3: Create a configured "Session" class
Session = sessionmaker(bind=engine)

# Step 4: Create a Session
session = Session()

try:
    # Step 5: Execute raw SQL
    raw_sql = text("SELECT * FROM users WHERE id = :user_id")
    result = session.execute(raw_sql, {'user_id': 1})
    
    # Step 6: Fetch results
    for row in result:
        print(row)
    
    # Step 7: Commit the transaction if needed
    session.commit()
except Exception as e:
    # Rollback in case of error
    session.rollback()
    print(f"Error: {e}")
finally:
    # Step 8: Close the session
    session.close()



from fastapi import FastAPI, HTTPException
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

app = FastAPI()

# Define your database URL (replace with your actual database URL)
DATABASE_URL = "postgresql+psycopg2://username:password@localhost/dbname"

# Create an engine
engine = create_engine(DATABASE_URL)

# Create a configured "Session" class
Session = sessionmaker(bind=engine)

@app.get("/user/{user_id}")
def get_user(user_id: int):
    session = Session()
    try:
        # Execute raw SQL
        raw_sql = text("SELECT * FROM users WHERE id = :user_id")
        result = session.execute(raw_sql, {'user_id': user_id})
        
        # Fetch results and convert to a list of dictionaries
        rows = result.fetchall()
        if not rows:
            raise HTTPException(status_code=404, detail="User not found")
        
        # Get column names from the result
        column_names = result.keys()
        
        # Convert rows to list of dictionaries
        result_list = [dict(zip(column_names, row)) for row in rows]
        
        # Commit the transaction if needed
        session.commit()
        
        return result_list
    except Exception as e:
        # Rollback in case of error
        session.rollback()
        raise HTTPException(status_code=500, detail=str(e))
    finally:
        # Close the session
        session.close()

# To run the app with uvicorn, use the following command in the terminal:
# uvicorn your_filename:app --reload




from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from . import crud, models, schemas
from .database import SessionLocal, engine

# Create the database tables
models.Base.metadata.create_all(bind=engine)

app = FastAPI()

# Dependency to get the database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/user/{user_id}", response_model=schemas.User)
def read_user(user_id: int, db: Session = Depends(get_db)):
    db_user = crud.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user

# Run the application with uvicorn
# uvicorn main:app --reload


from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base

DATABASE_URL = "postgresql+psycopg2://username:password@localhost/dbname"

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()



from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from sqlalchemy import text
from .database import SessionLocal

app = FastAPI()

# Dependency to get the database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/user/{user_id}")
def read_user(user_id: int, db: Session = Depends(get_db)):
    try:
        # Execute raw SQL
        raw_sql = text("SELECT * FROM users WHERE id = :user_id")
        result = db.execute(raw_sql, {'user_id': user_id})
        
        # Fetch results and convert to a list of dictionaries
        rows = result.fetchall()
        if not rows:
            raise HTTPException(status_code=404, detail="User not found")
        
        # Get column names from the result
        column_names = result.keys()
        
        # Convert rows to list of dictionaries
        result_list = [dict(zip(column_names, row)) for row in rows]
        
        return result_list
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# To run the app with uvicorn, use the following command in the terminal:
# uvicorn main:app --reload
