from fastapi import FastAPI
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup code
    print("Starting up...")
    yield
    # Shutdown code
    print("Shutting down...")

app = FastAPI(lifespan=lifespan)


from fastapi import FastAPI
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup code
    print("Starting up...")
    yield
    # Shutdown code
    print("Shutting down...")

app = FastAPI(lifespan=lifespan)

@app.get("/")
async def read_root():
    return {"Hello": "World"}


from fastapi import FastAPI
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Accessing the app instance to add a startup message
    print("Starting up...")

    # You can modify the app instance here if needed
    app.state.some_state = "This is some state data"

    yield  # This point is where the lifespan of the app is active

    # Accessing the app instance to add a shutdown message
    print("Shutting down...")

    # Clean up or modify the app state on shutdown
    del app.state.some_state

app = FastAPI(lifespan=lifespan)

@app.get("/")
async def read_root():
    # Accessing the app state within a route
    some_state = app.state.some_state
    return {"Hello": "World", "state": some_state}



from fastapi import FastAPI, APIRouter, Depends, Request
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup code
    print("Starting up...")
    app.state.some_state = "This is some state data"
    yield
    # Shutdown code
    print("Shutting down...")
    del app.state.some_state

app = FastAPI(lifespan=lifespan)

router = APIRouter()

def get_app_state(request: Request):
    return request.app.state.some_state

@router.get("/router-endpoint")
async def read_router_endpoint(state_data: str = Depends(get_app_state)):
    return {"Router Endpoint State": state_data}

app.include_router(router)

@app.get("/")
async def read_root(state_data: str = Depends(get_app_state)):
    return {"Hello": "World", "State": state_data}




from pydantic_settings import BaseSettings


from pydantic import BaseSettings

class Settings(BaseSettings):
    app_name: str = "MyApp"
    admin_email: str

    class Config:
        env_file = ".env"

settings = Settings()



from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    app_name: str = "MyApp"
    admin_email: str

    class Config:
        env_file = ".env"

settings = Settings()


