from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/get-name")
def get_name(name: str = Query(..., alias="name")):
    return {"name": name}


from fastapi import FastAPI, Query

app = FastAPI()

@app.get("/search")
def search(name: str = Query(None, alias="name"), age: int = Query(None, alias="age"), city: str = Query(None, alias="city")):
    return {"name": name, "age": age, "city": city}



from fastapi import FastAPI, Query
from typing import Optional

app = FastAPI()

@app.get("/get-info")
def get_info(name: Optional[str] = Query(None, alias="name"),
             age: Optional[int] = Query(None, alias="age"),
             city: Optional[str] = Query(None, alias="city")):
    return {"name": name, "age": age, "city": city}


from fastapi import FastAPI, Query
from typing import Optional

app = FastAPI()

@app.get("/get-info")
def get_info(
    name: Optional[str] = Query(None, alias="name"),
    age: Optional[int] = Query(None, gt=0, alias="age"),
    city: Optional[str] = Query(None, alias="city")
):
    return {"name": name, "age": age, "city": city}



from fastapi import FastAPI, Path, HTTPException
from typing import Union

app = FastAPI()

@app.get("/get-page/{page}")
def get_page(page: Union[str, int] = Path(...)):
    try:
        page_no = int(page)
        if page_no <= 0:
            raise ValueError("Page number must be greater than 0")
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid page number")
    
    page_no -= 1
    page_no = page_no * 10
    return {"page_start_index": page_no}


from fastapi import FastAPI, Query, HTTPException
from typing import Optional

app = FastAPI()

def validate_name(name: Optional[str] = Query(None, alias="name")):
    if name is not None and len(name) < 3:
        raise HTTPException(status_code=400, detail="Name must be at least 3 characters long")
    return name

@app.get("/get-info")
def get_info(
    name: str = Depends(validate_name),
    age: Optional[int] = Query(None, gt=0, alias="age"),
    city: Optional[str] = Query(None, alias="city")
):
    return {"name": name, "age": age, "city": city}





# Assuming you have the name to search for
name = 'tes'

# Construct the name_pattern with % signs
name_pattern = f'%{name}%'

# Print the constructed pattern
print(name_pattern)




from sqlalchemy import create_engine, text

# Assuming you have an SQLAlchemy engine set up
engine = create_engine('sqlite:///mydatabase.db')

# Define your query with a LIKE clause
query = "SELECT * FROM test WHERE name LIKE :name"
name_pattern = '%tes%'  # The pattern to search for

# Create a SQLAlchemy text object
sql = text(query)

# Execute the query with parameters
results = engine.execute(sql, {'name': name_pattern})

# Process results
for row in results:
    print(row)

