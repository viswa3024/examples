query = (
    session.query(
        ModelProvider,  # This selects all columns from ModelProvider
        func.count(func.distinct(ModelConfiguration.config_id)).label('config_count')
    )
    .outerjoin(ModelConfiguration, ModelProvider.model_id == ModelConfiguration.model_id)
    .group_by(ModelProvider)  # Group by the ModelProvider object itself
)

# Executing the query
result = query.all()


query = (
    session.query(
        ModelProvider,  # Select all columns from ModelProvider
        func.count(func.distinct(ModelConfiguration.config_id)).label('config_count')  # Count distinct config_id
    )
    .outerjoin(ModelConfiguration, ModelProvider.model_id == ModelConfiguration.model_id)  # Perform left join
    .group_by(ModelProvider.model_id)  # Group by the primary key column to avoid errors
)

# Executing the query
result = query.all()



 response_data = sorted(
        [
            {
                "model_id": model.model_id,
                "model_name": model.model_name,
                "model_vendor": model.model_vendor,
                "vendor_url": model.vendor_url,
                "model_type": model.model_type,
                "config_count": config_count
            }
            for model, config_count in results
        ],
        key=lambda x: x["model_name"]  # Sort by model_name
    )


response_data = [
        {
            **{column.name: getattr(model, column.name) for column in model.__table__.columns},  # Convert to dict
            "config_count": config_count
        }
        for model, config_count in results
    ]
