from fastapi import APIRouter, Depends, HTTPException, Query
from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime
from fastapi_sqlalchemy import db
from models import ApiKey  # Assume this is a defined SQLAlchemy model
from dependencies import get_current_user  # Assuming there's a dependency to get the current user

router = APIRouter()

# Pydantic model for individual API key response
class ApiKeyResponse(BaseModel):
    id: str
    created_at: datetime
    note: Optional[str]
    public_key: str
    display_secret_key: str

# Pydantic model for the paginated response
class PaginatedApiKeyResponse(BaseModel):
    total_records: int
    api_keys: List[ApiKeyResponse]

@router.get("/apikeys/", response_model=PaginatedApiKeyResponse)
async def get_all_api_keys(
    page: int = Query(1, ge=1),  # Ensure the page is at least 1
    page_size: int = Query(10, ge=1, le=100),  # Ensure the page size is between 1 and 100
    current_user=Depends(get_current_user)
):
    try:
        with db():
            # Calculate the offset for the query based on the page and page_size
            offset = (page - 1) * page_size
            
            # Query the total count of API keys
            total_records = db.session.query(ApiKey).count()
            
            # Query the database for API keys with limit, offset, and sorting by created_at
            api_keys = db.session.query(ApiKey).order_by(ApiKey.created_at.desc()).offset(offset).limit(page_size).all()

            # Map the SQLAlchemy objects to the Pydantic response model
            response_data = [
                ApiKeyResponse(
                    id=api_key.id,
                    created_at=api_key.created_at,
                    note=api_key.note,
                    public_key=api_key.public_key,
                    display_secret_key=api_key.display_secret_key
                )
                for api_key in api_keys
            ]
            
            # Return paginated response with total record count
            return PaginatedApiKeyResponse(
                total_records=total_records,
                api_keys=response_data
            )

    except Exception as e:
        raise HTTPException(status_code=500, detail="Internal Server Error") from e
