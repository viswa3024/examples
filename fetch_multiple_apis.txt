// Step 1: Define the API endpoints
const apiUrls = [
  'https://api.example.com/data1',
  'https://api.example.com/data2',
  'https://api.example.com/data3'
];

// Step 2: Create a function to fetch data from an API
const fetchData = (url) => {
  return fetch(url)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    });
};

// Step 3: Use Promise.all to fetch data from all APIs in parallel
const fetchAllData = (urls) => {
  const fetchPromises = urls.map(url => fetchData(url));
  return Promise.all(fetchPromises);
};

// Calling the function and handling the results
fetchAllData(apiUrls)
  .then(dataArray => {
    // dataArray contains the data from all API responses in the same order as the URLs
    console.log(dataArray);
  })
  .catch(error => {
    console.error('Error fetching data:', error);
  });




// Define the API endpoints
const apiUrls = [
  'https://api.example.com/data1',
  'https://api.example.com/data2',
  'https://api.example.com/data3'
];

// Create a function to fetch data from an API
const fetchData = (url) => {
  return fetch(url)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    });
};

// Use Promise.allSettled to fetch data from all APIs in parallel and handle both success and error cases
const fetchAllData = (urls) => {
  const fetchPromises = urls.map(url => fetchData(url));
  return Promise.allSettled(fetchPromises);
};

// Calling the function and handling the results
fetchAllData(apiUrls)
  .then(results => {
    results.forEach((result, index) => {
      if (result.status === 'fulfilled') {
        console.log(`Response from API ${index + 1}:`, result.value);
      } else {
        console.error(`Error from API ${index + 1}:`, result.reason);
      }
    });
  })
  .catch(error => {
    console.error('Error in fetching data:', error);
  });





import React, { useState, useEffect } from 'react';

const apiUrls = [
  'https://api.example.com/data1',
  'https://api.example.com/data2',
  'https://api.example.com/data3'
];

const fetchData = (url) => {
  return fetch(url)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    });
};

const FetchComponent = () => {
  const [data, setData] = useState([]);
  const [errors, setErrors] = useState([]);

  useEffect(() => {
    const fetchAllData = async (urls) => {
      const fetchPromises = urls.map(url => fetchData(url));
      const results = await Promise.allSettled(fetchPromises);
      
      const successData = results
        .filter(result => result.status === 'fulfilled')
        .map(result => result.value);
      
      const errorData = results
        .filter(result => result.status === 'rejected')
        .map(result => result.reason);
      
      setData(successData);
      setErrors(errorData);
    };

    fetchAllData(apiUrls);
  }, []);

  return (
    <div>
      <h1>API Responses</h1>
      <h2>Success Data:</h2>
      <ul>
        {data.map((item, index) => (
          <li key={index}>{JSON.stringify(item)}</li>
        ))}
      </ul>
      <h2>Errors:</h2>
      <ul>
        {errors.map((error, index) => (
          <li key={index}>{error.message}</li>
        ))}
      </ul>
    </div>
  );
};

export default FetchComponent;



import React, { useState, useEffect } from 'react';

const apiUrls = [
  'https://api.example.com/data1',
  'https://api.example.com/data2',
  'https://api.example.com/data3'
];

const fetchData = (url) => {
  return fetch(url)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    });
};

const FetchComponent = () => {
  const [apiOneSuccess, setApiOneSuccess] = useState(null);
  const [apiTwoSuccess, setApiTwoSuccess] = useState(null);
  const [apiThreeSuccess, setApiThreeSuccess] = useState(null);
  const [apiOneError, setApiOneError] = useState(null);
  const [apiTwoError, setApiTwoError] = useState(null);
  const [apiThreeError, setApiThreeError] = useState(null);

  useEffect(() => {
    const fetchAllData = async () => {
      const fetchPromises = apiUrls.map(url => fetchData(url));
      const results = await Promise.allSettled(fetchPromises);
      
      if (results[0].status === 'fulfilled') {
        setApiOneSuccess(results[0].value);
      } else {
        setApiOneError(results[0].reason);
      }
      
      if (results[1].status === 'fulfilled') {
        setApiTwoSuccess(results[1].value);
      } else {
        setApiTwoError(results[1].reason);
      }
      
      if (results[2].status === 'fulfilled') {
        setApiThreeSuccess(results[2].value);
      } else {
        setApiThreeError(results[2].reason);
      }
    };

    fetchAllData();
  }, []);

  return (
    <div>
      <h1>API Responses</h1>
      <h2>API One Success:</h2>
      <pre>{JSON.stringify(apiOneSuccess, null, 2)}</pre>
      <h2>API One Error:</h2>
      <pre>{apiOneError && apiOneError.message}</pre>
      
      <h2>API Two Success:</h2>
      <pre>{JSON.stringify(apiTwoSuccess, null, 2)}</pre>
      <h2>API Two Error:</h2>
      <pre>{apiTwoError && apiTwoError.message}</pre>
      
      <h2>API Three Success:</h2>
      <pre>{JSON.stringify(apiThreeSuccess, null, 2)}</pre>
      <h2>API Three Error:</h2>
      <pre>{apiThreeError && apiThreeError.message}</pre>
    </div>
  );
};

export default FetchComponent;





import React, { useState, useEffect } from 'react';

const apiUrls = [
  'https://api.example.com/data1',
  'https://api.example.com/data2',
  'https://api.example.com/data3'
];

const fetchData = (url) => {
  return fetch(url)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    });
};

const FetchComponent = () => {
  const [apiOneSuccess, setApiOneSuccess] = useState(null);
  const [apiTwoSuccess, setApiTwoSuccess] = useState(null);
  const [apiThreeSuccess, setApiThreeSuccess] = useState(null);
  const [apiOneError, setApiOneError] = useState(null);
  const [apiTwoError, setApiTwoError] = useState(null);
  const [apiThreeError, setApiThreeError] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAllData = async () => {
      setLoading(true); // Set loading to true before starting the fetch
      const fetchPromises = apiUrls.map(url => fetchData(url));
      const results = await Promise.allSettled(fetchPromises);
      
      if (results[0].status === 'fulfilled') {
        setApiOneSuccess(results[0].value);
      } else {
        setApiOneError(results[0].reason);
      }
      
      if (results[1].status === 'fulfilled') {
        setApiTwoSuccess(results[1].value);
      } else {
        setApiTwoError(results[1].reason);
      }
      
      if (results[2].status === 'fulfilled') {
        setApiThreeSuccess(results[2].value);
      } else {
        setApiThreeError(results[2].reason);
      }

      setLoading(false); // Set loading to false after all fetches are completed
    };

    fetchAllData();
  }, []);

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>API Responses</h1>
      
      <h2>API One Success:</h2>
      <pre>{JSON.stringify(apiOneSuccess, null, 2)}</pre>
      <h2>API One Error:</h2>
      <pre>{apiOneError && apiOneError.message}</pre>
      
      <h2>API Two Success:</h2>
      <pre>{JSON.stringify(apiTwoSuccess, null, 2)}</pre>
      <h2>API Two Error:</h2>
      <pre>{apiTwoError && apiTwoError.message}</pre>
      
      <h2>API Three Success:</h2>
      <pre>{JSON.stringify(apiThreeSuccess, null, 2)}</pre>
      <h2>API Three Error:</h2>
      <pre>{apiThreeError && apiThreeError.message}</pre>
    </div>
  );
};

export default FetchComponent;

