from enum import Enum
from fastapi import FastAPI, Query

app = FastAPI()

class SortOrder(str, Enum):
    asc = "asc"
    desc = "desc"

@app.get("/items/")
def read_items(order: SortOrder = Query(SortOrder.asc)):
    return {"order": order}

# To run the application:
# uvicorn myapp:app --reload



from enum import Enum
from typing import Optional
from fastapi import FastAPI, Query

app = FastAPI()

class SortOrder(str, Enum):
    asc = "asc"
    desc = "desc"

@app.get("/items/")
def read_items(order: Optional[SortOrder] = Query(None)):
    return {"order": order}

# To run the application:
# uvicorn myapp:app --reload




from enum import Enum
from typing import Optional
from fastapi import FastAPI, Query

app = FastAPI()

class SortOrder(str, Enum):
    asc = "asc"
    desc = "desc"

@app.get("/items/")
def read_items(order: Optional[SortOrder] = Query(SortOrder.desc)):
    return {"order": order}

# To run the application:
# uvicorn myapp:app --reload



from enum import Enum
from typing import Optional
from fastapi import FastAPI, Query

app = FastAPI()

class SortOrder(str, Enum):
    asc = "asc"
    desc = "desc"

@app.get("/items/")
def read_items(
    order: Optional[SortOrder] = Query(SortOrder.desc),
    sort_col: Optional[str] = Query("Timestamp")
):
    return {"order": order, "sort_col": sort_col}

# To run the application:
# uvicorn myapp:app --reload



from typing import List, Union
from pydantic import BaseModel
from fastapi import FastAPI, Body

app = FastAPI()


we can use embed=True in the Body function to ensure that the request body is embedded directly under a key instead of being a raw list. Here's how you can update the endpoint to include embed=True:

@app.post("/filter")
def filter(testRequest: List[TestRequest] = Body([], embed=True)):
    return {"testRequest": testRequest}

# To run the application:
# uvicorn myapp:app --reload


