// context/ConfigContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import Keycloak, { KeycloakInstance } from 'keycloak-js';

interface Config {
    keycloak: KeycloakInstance | null;
}

interface ConfigContextType {
    config: Config;
    setConfig: React.Dispatch<React.SetStateAction<Config>>;
}

const initialConfig: Config = {
    keycloak: null,
};

const ConfigContext = createContext<ConfigContextType | undefined>(undefined);

export const ConfigProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
    const [config, setConfig] = useState<Config>(initialConfig);

    useEffect(() => {
        const keycloakInstance = new Keycloak('/keycloak.json'); // Path to your Keycloak configuration
        keycloakInstance.init({ onLoad: 'check-sso' }).then((authenticated) => {
            setConfig({ keycloak: keycloakInstance });
            console.log('Keycloak authentication initialized:', authenticated);
        }).catch((error) => {
            console.error('Keycloak initialization error:', error);
        });
    }, []);

    return (
        <ConfigContext.Provider value={{ config, setConfig }}>
            {children}
        </ConfigContext.Provider>
    );
};

export const useConfig = () => {
    const context = useContext(ConfigContext);
    if (!context) {
        throw new Error('useConfig must be used within a ConfigProvider');
    }
    return context;
};


// pages/_app.tsx
import { AppProps } from 'next/app';
import { useEffect } from 'react';
import { ConfigProvider } from '../context/ConfigContext'; // Adjust path as needed

function MyApp({ Component, pageProps }: AppProps) {
    const { config } = useConfig();

    useEffect(() => {
        if (config.keycloak) {
            config.keycloak.init({
                onLoad: 'check-sso',
            }).then((authenticated) => {
                console.log('Keycloak authentication initialized:', authenticated);
                if (authenticated) {
                    // User is authenticated
                    console.log('User is authenticated');
                } else {
                    // User is not authenticated
                    console.log('User is not authenticated');
                }
            }).catch((error) => {
                console.error('Keycloak initialization error:', error);
            });
        }
    }, [config.keycloak]);

    return (
        <ConfigProvider>
            <Component {...pageProps} />
        </ConfigProvider>
    );
}

export default MyApp;


// components/KeycloakComponent.tsx
import React, { useEffect } from 'react';
import Keycloak from 'keycloak-js';
import { useConfig } from '../context/ConfigContext'; // Adjust path as needed

const KeycloakComponent = () => {
    const { config } = useConfig();

    useEffect(() => {
        if (config.keycloak) {
            config.keycloak.init({
                onLoad: 'check-sso',
            }).then((authenticated) => {
                console.log('Keycloak authentication initialized:', authenticated);
            }).catch((error) => {
                console.error('Keycloak initialization error:', error);
            });
        }
    }, [config.keycloak]);

    return (
        <div>
            {config.keycloak ? (
                <div>
                    <h1>Keycloak Component</h1>
                    {/* Additional Keycloak-related UI */}
                </div>
            ) : (
                <p>Keycloak is not initialized</p>
            )}
        </div>
    );
};

export default KeycloakComponent;


// pages/index.tsx
import React from 'react';
import KeycloakComponent from '../components/KeycloakComponent';

const HomePage = () => {
    return (
        <div>
            <h1>Welcome to the Home Page</h1>
            <KeycloakComponent />
        </div>
    );
};

export default HomePage;
