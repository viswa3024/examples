import Keycloak, { KeycloakInstance } from 'keycloak-js';

export interface KeycloakConfig {
  url: string;
  realm: string;
  clientId: string;
}

let keycloakInstance: KeycloakInstance | null = null;
let keycloakConfig: KeycloakConfig = {
  url: 'http://localhost:8080/auth', // Default value or fallback
  realm: 'default-realm', // Default value or fallback
  clientId: 'default-client-id', // Default value or fallback
};

export const initKeycloak = async (): Promise<KeycloakInstance> => {
  if (keycloakInstance) {
    return keycloakInstance;
  }

  try {
    keycloakInstance = new Keycloak(keycloakConfig);
    await keycloakInstance.init({
      onLoad: 'check-sso',
    });
    return keycloakInstance;
  } catch (error) {
    console.error('Keycloak initialization error:', error);
    throw error;
  }
};

export const fetchKeycloakConfig = async (): Promise<KeycloakConfig> => {
  try {
    const response = await fetch('/api/config/keycloak');
    if (!response.ok) {
      throw new Error('Failed to fetch Keycloak configuration');
    }
    const config = await response.json() as KeycloakConfig;
    return config;
  } catch (error) {
    console.error('Error fetching Keycloak configuration:', error);
    throw error;
  }
};

export const updateKeycloakConfig = (config: KeycloakConfig) => {
  keycloakConfig = config;
  keycloakInstance = null; // Reset Keycloak instance to force re-initialization with new config
};

export const getKeycloakInstance = (): KeycloakInstance | null => {
  return keycloakInstance;
};

export const getKeycloakConfig = (): KeycloakConfig => {
  return keycloakConfig;
};



// _app.tsx
import { AppProps } from 'next/app';
import { useEffect, useState } from 'react';
import keycloak, { initKeycloak, fetchKeycloakConfig, getKeycloakInstance, updateKeycloakConfig, KeycloakConfig } from '../path/to/keycloak'; // Adjust the path to your keycloak.ts file

function MyApp({ Component, pageProps }: AppProps) {
  const [loading, setLoading] = useState(true);
  const [authenticated, setAuthenticated] = useState(false);

  useEffect(() => {
    async function initializeApp() {
      try {
        const config = await fetchKeycloakConfig();
        updateKeycloakConfig(config); // Update Keycloak configuration
        const kc = await initKeycloak();
        if (kc.authenticated) {
          setAuthenticated(true);
        }
      } catch (error) {
        console.error('Error initializing application:', error);
      } finally {
        setLoading(false);
      }
    }

    initializeApp();
  }, []);

  const login = async () => {
    try {
      await keycloak.login();
      setAuthenticated(true);
    } catch (error) {
      console.error('Login error:', error);
    }
  };

  const logout = async () => {
    try {
      await keycloak.logout();
      setAuthenticated(false);
    } catch (error) {
      console.error('Logout error:', error);
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <Component {...pageProps} keycloak={{ login, logout, authenticated }} />
  );
}

export default MyApp;


// hooks/useAuth.ts
import { useEffect, useState } from 'react';
import { getKeycloakInstance } from '../path/to/keycloak'; // Adjust the path to your keycloak.ts file

const useAuth = () => {
  const [authenticated, setAuthenticated] = useState(false);
  const keycloak = getKeycloakInstance();

  useEffect(() => {
    if (keycloak) {
      setAuthenticated(keycloak.authenticated);
    }
  }, [keycloak]);

  return authenticated;
};

export default useAuth;


// pages/protected-page.tsx
import useAuth from '../hooks/useAuth';

const ProtectedPage = () => {
  const isAuthenticated = useAuth();

  if (!isAuthenticated) {
    // Redirect or show login message
    return <div>You are not authenticated. Please log in.</div>;
  }

  return (
    <div>
      <h1>Protected Page</h1>
      <p>This page is protected.</p>
    </div>
  );
};

export default ProtectedPage;
