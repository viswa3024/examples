**PROJECT STRUCTURE**

rag-financial-app/
â”œâ”€â”€ backend/
â”‚   â”œâ”€â”€ main.py
â”‚   â”œâ”€â”€ openai_utils.py
â”‚   â”œâ”€â”€ requirements.txt
â”‚   â””â”€â”€ .env
â””â”€â”€ frontend/
    â”œâ”€â”€ components/
    â”‚   â””â”€â”€ QueryForm.js
    â”œâ”€â”€ pages/
    â”‚   â””â”€â”€ index.js
    â””â”€â”€ package.json

=========================
BACKEND (FastAPI + OpenAI)
=========================

# backend/requirements.txt
fastapi
uvicorn
openai
python-dotenv

# backend/.env
OPENAI_API_KEY=your_openai_key_here

# backend/openai_utils.py
import openai
import os
from dotenv import load_dotenv

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

def generate_report(prompt: str):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo-16k",
        messages=[
            {"role": "system", "content": "You are a financial analyst that generates reports and JSON chart data."},
            {"role": "user", "content": prompt}
        ]
    )
    return response['choices'][0]['message']['content']

# backend/main.py
from fastapi import FastAPI, Query
from fastapi.middleware.cors import CORSMiddleware
from openai_utils import generate_report

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/generate/")
def generate(query: str = Query(...)):
    result = generate_report(query)
    return {"report": result}

# Run backend
# > cd backend
# > uvicorn main:app --reload

=====================
FRONTEND (Next.js + Chart.js)
=====================

# frontend/package.json (simplified)
{
  "dependencies": {
    "axios": "^1.6.0",
    "chart.js": "^4.3.0",
    "react-chartjs-2": "^5.2.0",
    "next": "latest",
    "react": "latest",
    "react-dom": "latest"
  }
}

# Install frontend dependencies
# > cd frontend
# > npm install

# frontend/components/QueryForm.js
import { useState } from 'react';
import axios from 'axios';
import { Bar, Pie, Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  ArcElement,
  PointElement,
  LineElement,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  ArcElement,
  PointElement,
  LineElement,
  Tooltip,
  Legend
);

const parseChartData = (text) => {
  try {
    const jsonStart = text.indexOf('{');
    const json = text.slice(jsonStart);
    return JSON.parse(json);
  } catch {
    return null;
  }
};

export default function QueryForm() {
  const [query, setQuery] = useState('');
  const [report, setReport] = useState('');
  const [chartData, setChartData] = useState(null);
  const [chartType, setChartType] = useState('');

  const handleSubmit = async () => {
    const res = await axios.get('http://localhost:8000/generate/', {
      params: { query }
    });
    setReport(res.data.report);

    const parsed = parseChartData(res.data.report);
    if (parsed) {
      setChartType(parsed.type);
      setChartData({
        labels: parsed.labels,
        datasets: [
          {
            label: parsed.label || 'Data',
            data: parsed.data,
            backgroundColor: [
              'rgba(255, 99, 132, 0.5)',
              'rgba(54, 162, 235, 0.5)',
              'rgba(255, 206, 86, 0.5)',
              'rgba(75, 192, 192, 0.5)',
              'rgba(153, 102, 255, 0.5)'
            ]
          }
        ]
      });
    }
  };

  const renderChart = () => {
    if (!chartData) return null;
    if (chartType === 'bar') return <Bar data={chartData} />;
    if (chartType === 'pie') return <Pie data={chartData} />;
    if (chartType === 'line') return <Line data={chartData} />;
    return <p>Chart type not recognized.</p>;
  };

  return (
    <div>
      <textarea
        rows="4"
        cols="80"
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder="Enter financial query here"
      />
      <br />
      <button onClick={handleSubmit}>Generate Report</button>
      <pre style={{ whiteSpace: 'pre-wrap', marginTop: '1em' }}>{report}</pre>
      <div style={{ width: '600px', height: '400px', marginTop: '2em' }}>{renderChart()}</div>
    </div>
  );
}

# frontend/pages/index.js
import QueryForm from '../components/QueryForm';

export default function Home() {
  return (
    <div style={{ padding: '2rem' }}>
      <h1>ðŸ“Š Financial Report Generator</h1>
      <QueryForm />
    </div>
  );
}

# Run frontend
# > cd frontend
# > npm run dev
