/src
  /app
    /api
      /get-meals.js
  /pages



// /src/app/api/get-meals.js
export default function handler(req, res) {
  res.status(200).json({ message: "Hello from get-meals API" });
}


// next.config.js
module.exports = {
  reactStrictMode: true,
  // other configurations
}



export async function GET(request) {
    return new Response(JSON.stringify({ message: 'Hello, world!' }), {
      headers: { 'Content-Type': 'application/json' },
    });
  }



async function handler(request) {
    switch (request.method) {
      case 'GET':
        return new Response(JSON.stringify({ message: 'Hello, world1!' }), {
          headers: { 'Content-Type': 'application/json' },
        });
      case 'POST':
        const data = await request.json();
        return new Response(JSON.stringify({ message: 'Data received', data }), {
          headers: { 'Content-Type': 'application/json' },
        });
      default:
        return new Response('Method not allowed', { status: 405 });
    }
  }
  
  export { handler as GET, handler as POST };









app/api/example/route.js

// app/api/example/route.js

export async function GET(request) {
  return new Response(JSON.stringify({ message: 'This is a GET request' }), {
    headers: { 'Content-Type': 'application/json' },
  });
}

export async function POST(request) {
  const data = await request.json();
  return new Response(JSON.stringify({ message: 'This is a POST request', data }), {
    headers: { 'Content-Type': 'application/json' },
  });
}

export async function PUT(request) {
  const data = await request.json();
  return new Response(JSON.stringify({ message: 'This is a PUT request', data }), {
    headers: { 'Content-Type': 'application/json' },
  });
}

export async function DELETE(request) {
  return new Response(JSON.stringify({ message: 'This is a DELETE request' }), {
    headers: { 'Content-Type': 'application/json' },
  });
}

export async function PATCH(request) {
  const data = await request.json();
  return new Response(JSON.stringify({ message: 'This is a PATCH request', data }), {
    headers: { 'Content-Type': 'application/json' },
  });
}


Dynamic API Route Example

File: app/api/users/[id]/route.js

// app/api/users/[id]/route.js

export async function GET(request, { params }) {
  const { id } = params;
  return new Response(JSON.stringify({ message: 'GET user', userId: id }), {
    headers: { 'Content-Type': 'application/json' },
  });
}

export async function POST(request, { params }) {
  const { id } = params;
  const data = await request.json();
  return new Response(JSON.stringify({ message: 'POST user', userId: id, data }), {
    headers: { 'Content-Type': 'application/json' },
  });
}

export async function PUT(request, { params }) {
  const { id } = params;
  const data = await request.json();
  return new Response(JSON.stringify({ message: 'PUT user', userId: id, data }), {
    headers: { 'Content-Type': 'application/json' },
  });
}

export async function DELETE(request, { params }) {
  const { id } = params;
  return new Response(JSON.stringify({ message: 'DELETE user', userId: id }), {
    headers: { 'Content-Type': 'application/json' },
  });
}

export async function PATCH(request, { params }) {
  const { id } = params;
  const data = await request.json();
  return new Response(JSON.stringify({ message: 'PATCH user', userId: id, data }), {
    headers: { 'Content-Type': 'application/json' },
  });
}




Static API Route Example
In this example, the route.js file will handle multiple HTTP methods with a unified handler.

File: app/api/example/route.js


// app/api/example/route.js

async function handleRequest(request) {
  switch (request.method) {
    case 'GET':
      return new Response(JSON.stringify({ message: 'This is a GET request' }), {
        headers: { 'Content-Type': 'application/json' },
      });
    case 'POST':
      const postData = await request.json();
      return new Response(JSON.stringify({ message: 'This is a POST request', data: postData }), {
        headers: { 'Content-Type': 'application/json' },
      });
    case 'PUT':
      const putData = await request.json();
      return new Response(JSON.stringify({ message: 'This is a PUT request', data: putData }), {
        headers: { 'Content-Type': 'application/json' },
      });
    case 'DELETE':
      return new Response(JSON.stringify({ message: 'This is a DELETE request' }), {
        headers: { 'Content-Type': 'application/json' },
      });
    case 'PATCH':
      const patchData = await request.json();
      return new Response(JSON.stringify({ message: 'This is a PATCH request', data: patchData }), {
        headers: { 'Content-Type': 'application/json' },
      });
    default:
      return new Response('Method not allowed', { status: 405 });
  }
}

export { handleRequest as GET, handleRequest as POST, handleRequest as PUT, handleRequest as DELETE, handleRequest as PATCH };



Dynamic API Route Example
For the dynamic API route, we will also use a unified handler to manage multiple HTTP methods.

File: app/api/users/[id]/route.js


// app/api/users/[id]/route.js

async function handleRequest(request, { params }) {
  const { id } = params;

  switch (request.method) {
    case 'GET':
      return new Response(JSON.stringify({ message: 'GET user', userId: id }), {
        headers: { 'Content-Type': 'application/json' },
      });
    case 'POST':
      const postData = await request.json();
      return new Response(JSON.stringify({ message: 'POST user', userId: id, data: postData }), {
        headers: { 'Content-Type': 'application/json' },
      });
    case 'PUT':
      const putData = await request.json();
      return new Response(JSON.stringify({ message: 'PUT user', userId: id, data: putData }), {
        headers: { 'Content-Type': 'application/json' },
      });
    case 'DELETE':
      return new Response(JSON.stringify({ message: 'DELETE user', userId: id }), {
        headers: { 'Content-Type': 'application/json' },
      });
    case 'PATCH':
      const patchData = await request.json();
      return new Response(JSON.stringify({ message: 'PATCH user', userId: id, data: patchData }), {
        headers: { 'Content-Type': 'application/json' },
      });
    default:
      return new Response('Method not allowed', { status: 405 });
  }
}

export { handleRequest as GET, handleRequest as POST, handleRequest as PUT, handleRequest as DELETE, handleRequest as PATCH };
