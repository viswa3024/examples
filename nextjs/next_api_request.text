To read values from a NextApiRequest in a Next.js API route, you can access various properties of the request object (req). These properties include query parameters, request body, headers, and cookies.

Here’s a breakdown of how you can access these values:

Query Parameters:
Query parameters can be accessed from req.query.

Request Body:
The request body can be accessed from req.body. Note that you need to use a middleware to parse the body if it’s in a format like JSON.

Headers:
Headers can be accessed from req.headers.

Cookies:
Cookies can be accessed from req.cookies.

Example of Accessing Values in NextApiRequest
Here’s an example demonstrating how to access these values in a TypeScript-based Next.js API route:

pages/api/example.ts:

import type { NextApiRequest, NextApiResponse } from 'next';

// Example handler function
export default function handler(req: NextApiRequest, res: NextApiResponse) {
  // Accessing query parameters
  const { id, name } = req.query;

  // Accessing request body
  const body = req.body;

  // Accessing headers
  const authorizationHeader = req.headers.authorization;

  // Accessing cookies
  const cookies = req.cookies;

  // Respond with the gathered information
  res.status(200).json({
    query: { id, name },
    body: body,
    headers: { authorization: authorizationHeader },
    cookies: cookies,
  });
}


Detailed Explanation:
Query Parameters:

const { id, name } = req.query;


This extracts the id and name parameters from the query string. If the request URL is /api/example?id=123&name=John, id will be 123 and name will be John.

Request Body:


const body = req.body;


This accesses the request body. Ensure that your Next.js configuration or custom middleware properly parses the request body into req.body.

Headers:

const authorizationHeader = req.headers.authorization;


This accesses the Authorization header from the request.

Cookies:

const cookies = req.cookies;


This accesses the cookies sent with the request.

Additional Configuration:
For parsing JSON request bodies in Next.js API routes, ensure that you have the appropriate configuration in your Next.js setup. By default, Next.js parses JSON request bodies for you.

If you need to handle other types of request bodies (e.g., urlencoded or multipart/form-data), you might need additional middleware. Here’s how you can use middleware for such cases:

Middleware for urlencoded:
pages/api/urlencoded-middleware.ts:


import { NextApiRequest, NextApiResponse } from 'next';
import nextConnect from 'next-connect';
import bodyParser from 'body-parser';

const handler = nextConnect<NextApiRequest, NextApiResponse>();

handler.use(bodyParser.urlencoded({ extended: true }));

handler.post((req, res) => {
  // Access req.body
  const body = req.body;
  res.status(200).json({ body });
});

export default handler;


Middleware for multipart/form-data:
You would typically use a library like multer for handling file uploads.

Example Using multer:
pages/api/upload.ts:


import nextConnect from 'next-connect';
import multer from 'multer';

const upload = multer({ dest: '/tmp' });

const handler = nextConnect();

handler.use(upload.single('file'));

handler.post((req, res) => {
  const file = req.file;
  res.status(200).json({ file });
});

export default handler;

export const config = {
  api: {
    bodyParser: false, // Disallow body parsing, consume as stream
  },
};
