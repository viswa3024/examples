from sqlalchemy import (
    Column, String, DateTime, ForeignKey, UniqueConstraint, Index, JSON
)
from sqlalchemy.orm import relationship, declarative_base
from sqlalchemy.sql import func

Base = declarative_base()

class ApiKey(Base):
    __tablename__ = 'api_keys'
    
    id = Column(String, primary_key=True, unique=True, default=func.uuid())
    created_at = Column(DateTime, default=func.now())
    note = Column(String, nullable=True)
    public_key = Column(String, unique=True)
    hashed_secret_key = Column(String, unique=True)
    fast_hashed_secret_key = Column(String, unique=True, nullable=True)
    display_secret_key = Column(String)
    last_used_at = Column(DateTime, nullable=True)
    expires_at = Column(DateTime, nullable=True)
    project_id = Column(String, ForeignKey('projects.id', ondelete='CASCADE'))

    project = relationship("Project", back_populates="api_keys")

    __table_args__ = (
        Index('ix_api_keys_project_id', 'project_id'),
        Index('ix_api_keys_public_key', 'public_key'),
        Index('ix_api_keys_hashed_secret_key', 'hashed_secret_key'),
        Index('ix_api_keys_fast_hashed_secret_key', 'fast_hashed_secret_key'),
    )


class Project(Base):
    __tablename__ = 'projects'
    
    id = Column(String, primary_key=True, default=func.uuid())
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    name = Column(String)
    cloud_config = Column(JSON, nullable=True)

    project_members = relationship("ProjectMembership", back_populates="project")
    traces = relationship("Trace", back_populates="project")
    observations = relationship("Observation", back_populates="project")
    api_keys = relationship("ApiKey", back_populates="project")
    dataset = relationship("Dataset", back_populates="project")
    raw_events = relationship("Events", back_populates="project")
    invitations = relationship("MembershipInvitation", back_populates="project")
    sessions = relationship("TraceSession", back_populates="project")
    prompts = relationship("Prompt", back_populates="project")
    models = relationship("Model", back_populates="project")
    audit_logs = relationship("AuditLog", back_populates="project")
    eval_templates = relationship("EvalTemplate", back_populates="project")
    job_configurations = relationship("JobConfiguration", back_populates="project")
    job_executions = relationship("JobExecution", back_populates="project")
    llm_api_keys = relationship("LlmApiKeys", back_populates="project")
    posthog_integration = relationship("PosthogIntegration", back_populates="project")
