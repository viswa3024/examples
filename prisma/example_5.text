from sqlalchemy import (
    Column,
    String,
    DateTime,
    JSON,
    ForeignKey,
    UniqueConstraint,
    Index,
    func,
)
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
import uuid

Base = declarative_base()


class Project(Base):
    __tablename__ = "projects"

    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    name = Column(String, nullable=False)
    cloud_config = Column(JSON)

    project_members = relationship("ProjectMembership", back_populates="project")
    traces = relationship("Trace", back_populates="project")
    observations = relationship("Observation", back_populates="project")
    api_keys = relationship("ApiKey", back_populates="project")
    dataset = relationship("Dataset", back_populates="project")
    raw_events = relationship("Events", back_populates="project")
    invitations = relationship("MembershipInvitation", back_populates="project")
    sessions = relationship("TraceSession", back_populates="project")
    prompts = relationship("Prompt", back_populates="project")
    models = relationship("Model", back_populates="project")
    audit_logs = relationship("AuditLog", back_populates="project")
    eval_templates = relationship("EvalTemplate", back_populates="project")
    job_configurations = relationship("JobConfiguration", back_populates="project")
    job_executions = relationship("JobExecution", back_populates="project")
    llm_api_keys = relationship("LlmApiKeys", back_populates="project")
    posthog_integrations = relationship("PosthogIntegration", back_populates="project")



class ApiKey(Base):
    __tablename__ = "api_keys"

    id = Column(String, primary_key=True, unique=True, default=lambda: str(uuid.uuid4()))
    created_at = Column(DateTime, default=func.now())
    note = Column(String)
    public_key = Column(String, unique=True)
    hashed_secret_key = Column(String, unique=True)
    fast_hashed_secret_key = Column(String, unique=True)
    display_secret_key = Column(String)
    last_used_at = Column(DateTime)
    expires_at = Column(DateTime)
    project_id = Column(String, ForeignKey("projects.id"))

    project = relationship("Project", back_populates="api_keys")

    __table_args__ = (
        Index("ix_api_keys_project_id", "project_id"),
        Index("ix_api_keys_public_key", "public_key"),
        Index("ix_api_keys_hashed_secret_key", "hashed_secret_key"),
        Index("ix_api_keys_fast_hashed_secret_key", "fast_hashed_secret_key"),
    )



class AuditLog(Base):
    __tablename__ = "audit_logs"

    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    user_id = Column(String, ForeignKey("users.id"))
    project_id = Column(String, ForeignKey("projects.id"))
    user_project_role = Column(String)
    resource_type = Column(String)
    resource_id = Column(String)
    action = Column(String)
    before = Column(String)  # stringified JSON
    after = Column(String)  # stringified JSON

    project = relationship("Project", back_populates="audit_logs")
    user = relationship("User", back_populates="audit_logs")

    __table_args__ = (
        Index("ix_audit_logs_project_id", "project_id"),
        Index("ix_audit_logs_created_at", "created_at"),
    )



    from sqlalchemy import (
    Column,
    String,
    DateTime,
    Boolean,
    ForeignKey,
    Table,
    UniqueConstraint,
    Index,
    ARRAY,
    func,
)
from sqlalchemy.orm import relationship
import uuid

class User(Base):
    __tablename__ = "users"

    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    name = Column(String, nullable=True)
    email = Column(String, unique=True, nullable=True)
    email_verified = Column(DateTime, nullable=True)
    password = Column(String, nullable=True)
    image = Column(String, nullable=True)
    admin = Column(Boolean, default=False)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())
    feature_flags = Column(ARRAY(String), default=[])

    accounts = relationship("Account", back_populates="user")
    sessions = relationship("Session", back_populates="user")
    project_memberships = relationship("ProjectMembership", back_populates="user")
    invitations = relationship("MembershipInvitation", back_populates="user")
    audit_logs = relationship("AuditLog", back_populates="user")

    __table_args__ = (
        UniqueConstraint("email"),
        Index("ix_users_email_verified", "email_verified"),
    )

