from fastapi import APIRouter, Depends, HTTPException, Body
from pydantic import BaseModel
from typing import Optional
from fastapi_sqlalchemy import db
from models import ApiKey  # Assume this is a defined SQLAlchemy model
from utils import audit_log  # Utility function for audit logging
from dependencies import get_current_user  # Assuming there's a dependency to get the current user

router = APIRouter()

# Pydantic models for request and response
class ApiKeyCreateInput(BaseModel):
    project_id: str
    note: Optional[str] = None
    pk: str
    sk: str
    hashedSk: str
    displaySk: str

class ApiKeyResponse(BaseModel):
    id: str
    created_at: str
    note: Optional[str]
    public_key: str
    secret_key: str
    display_secret_key: str

@router.post("/apikeys/", response_model=ApiKeyResponse)
async def create_api_key(
    input: ApiKeyCreateInput = Body(..., embed=True),
    current_user=Depends(get_current_user)
):
    try:
        # Use the with statement to handle db.session lifecycle
        with db():
            # Extract pk, sk, hashedSk, displaySk from the request input
            pk = input.pk
            sk = input.sk
            hashed_sk = input.hashedSk
            display_sk = input.displaySk

            # Create API key in the database
            api_key = ApiKey(
                project_id=input.project_id,
                public_key=pk,
                hashed_secret_key=hashed_sk,
                display_secret_key=display_sk,
                note=input.note
            )
            db.session.add(api_key)
            db.session.commit()
            db.session.refresh(api_key)

            # Log the action in the audit log
            await audit_log(
                session=current_user.session,
                resource_type="apiKey",
                resource_id=api_key.id,
                action="create"
            )

            # Prepare the response
            response_data = ApiKeyResponse(
                id=api_key.id,
                created_at=api_key.created_at.isoformat(),
                note=input.note,
                public_key=api_key.public_key,
                secret_key=sk,
                display_secret_key=display_sk
            )
            return response_data

    except Exception as e:
        db.session.rollback()
        raise HTTPException(status_code=500, detail="Internal Server Error") from e
