from fastapi import FastAPI, Request, HTTPException, Depends, status
from pydantic import BaseModel
import jwt
import requests
from typing import Dict, Optional

app = FastAPI()

# Keycloak configuration
KEYCLOAK_SERVER_URL = 'http://localhost:8080/auth/'
KEYCLOAK_REALM_NAME = 'your_realm'
CLIENT_ID = 'your_client_id'
JWKS_URL = f'{KEYCLOAK_SERVER_URL}/realms/{KEYCLOAK_REALM_NAME}/protocol/openid-connect/certs'

# Define the User model
class User(BaseModel):
    sub: str
    name: str
    roles: list

def get_public_key(jwk_key_id: str) -> Optional[str]:
    response = requests.get(JWKS_URL)
    jwks = response.json()
    for key in jwks.get('keys', []):
        if key.get('kid') == jwk_key_id:
            return jwt.algorithms.RSAAlgorithm.from_jwk(key)
    raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Public key not found")

def extract_token(request: Request) -> str:
    authorization_header = request.headers.get("Authorization")
    if not authorization_header or not authorization_header.startswith("Bearer "):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Authorization header missing or malformed")
    return authorization_header[len("Bearer "):]

def verify_token(token: str = Depends(extract_token)) -> User:
    try:
        # Decode the JWT header to get the key ID (kid)
        unverified_header = jwt.get_unverified_header(token)
        key_id = unverified_header.get('kid')
        
        if not key_id:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Missing key ID in token header")
        
        # Fetch the public key corresponding to the key ID
        public_key = get_public_key(key_id)
        
        # Decode and verify the JWT token using the public key
        decoded_token = jwt.decode(token, public_key, algorithms=['RS256'], audience=CLIENT_ID)
        return User(
            sub=decoded_token['sub'],
            name=decoded_token.get('preferred_username', ''),
            roles=decoded_token.get('realm_access', {}).get('roles', [])
        )
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Token has expired")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid token")

@app.get("/secure-data")
def get_secure_data(user: User = Depends(verify_token)):
    return {"message": "This is secured data", "user": user}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
