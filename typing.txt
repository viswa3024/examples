import React, { useState, useEffect } from 'react';

const TypingEffect = ({ text, speed = 100 }) => {
  const [displayedText, setDisplayedText] = useState('');
  const [index, setIndex] = useState(0);

  useEffect(() => {
    if (index < text.length) {
      const timeoutId = setTimeout(() => {
        setDisplayedText(displayedText + text[index]);
        setIndex(index + 1);
      }, speed);
      return () => clearTimeout(timeoutId);
    }
  }, [index, text, displayedText, speed]);

  return <div>{displayedText}</div>;
};

export default TypingEffect;


import React from 'react';
import TypingEffect from './TypingEffect';

const App = () => {
  return (
    <div>
      <TypingEffect text="Hello, welcome to my website!" speed={150} />
    </div>
  );
};

export default App;



.blinking-cursor {
  font-weight: 100;
  font-size: 20px;
  color: black;
  -webkit-animation: 1s blink step-end infinite;
  -moz-animation: 1s blink step-end infinite;
  -ms-animation: 1s blink step-end infinite;
  -o-animation: 1s blink step-end infinite;
  animation: 1s blink step-end infinite;
}

@keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: black;
  }
}

@-webkit-keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: black;
  }
}

@-moz-keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: black;
  }
}

@-ms-keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: black;
  }
}

@-o-keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: black;
  }
}



import React, { useState, useEffect } from 'react';
import './styles.css'; // Import the CSS file

const TypingEffect = ({ text, speed = 100 }) => {
  const [displayedText, setDisplayedText] = useState('');
  const [index, setIndex] = useState(0);

  useEffect(() => {
    if (index < text.length) {
      const timeoutId = setTimeout(() => {
        setDisplayedText(displayedText + text[index]);
        setIndex(index + 1);
      }, speed);
      return () => clearTimeout(timeoutId);
    }
  }, [index, text, displayedText, speed]);

  return (
    <div>
      {displayedText}
      <span className="blinking-cursor">|</span>
    </div>
  );
};

export default TypingEffect;


import React from 'react';
import TypingEffect from './TypingEffect';

const App = () => {
  return (
    <div>
      <TypingEffect text="Hello, welcome to my website!" speed={150} />
    </div>
  );
};

export default App;






import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import './styles.css'; // Import the CSS file for blinking cursor

const TypingMarkdown = ({ children, speed = 100 }) => {
  const [displayedText, setDisplayedText] = useState('');
  const [index, setIndex] = useState(0);

  useEffect(() => {
    if (index < children.length) {
      const timeoutId = setTimeout(() => {
        setDisplayedText(displayedText + children[index]);
        setIndex(index + 1);
      }, speed);
      return () => clearTimeout(timeoutId);
    }
  }, [index, children, displayedText, speed]);

  return (
    <div>
      <ReactMarkdown>{displayedText}</ReactMarkdown>
      <span className="blinking-cursor">|</span>
    </div>
  );
};

export default TypingMarkdown;



.blinking-cursor {
  font-weight: 100;
  font-size: 20px;
  color: black;
  -webkit-animation: 1s blink step-end infinite;
  -moz-animation: 1s blink step-end infinite;
  -ms-animation: 1s blink step-end infinite;
  -o-animation: 1s blink step-end infinite;
  animation: 1s blink step-end infinite;
}

@keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: black;
  }
}

@-webkit-keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: black;
  }
}

@-moz-keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: black;
  }
}

@-ms-keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: black;
  }
}

@-o-keyframes blink {
  from, to {
    color: transparent;
  }
  50% {
    color: black;
  }
}


import React from 'react';
import TypingMarkdown from './TypingMarkdown';

const App = () => {
  const markdownContent = `
  # Hello World
  This is a sample markdown content with **bold text** and _italic text_.
  `;

  return (
    <div>
      <TypingMarkdown speed={50}>{markdownContent}</TypingMarkdown>
    </div>
  );
};

export default App;



import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import './styles.css'; // Import the CSS file for any additional styles

const TypingMarkdown = ({ children, speed = 50, dotSpeed = 500 }) => {
  const [displayedText, setDisplayedText] = useState('');
  const [index, setIndex] = useState(0);
  const [dots, setDots] = useState('');

  useEffect(() => {
    if (index < children.length) {
      const timeoutId = setTimeout(() => {
        setDisplayedText(displayedText + children[index]);
        setIndex(index + 1);
      }, speed);
      return () => clearTimeout(timeoutId);
    }
  }, [index, children, displayedText, speed]);

  useEffect(() => {
    const dotInterval = setInterval(() => {
      setDots(prevDots => (prevDots.length < 3 ? prevDots + '.' : ''));
    }, dotSpeed);
    return () => clearInterval(dotInterval);
  }, [dotSpeed]);

  return (
    <div className="typing-markdown">
      <ReactMarkdown>{displayedText}</ReactMarkdown>
      {index < children.length && <span>{dots}</span>}
    </div>
  );
};


export default TypingMarkdown;



import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import './styles.css'; // Import the CSS file for any additional styles

const TypingMarkdown = ({ children, speed = 50, dotSpeed = 500 }) => {
  const [displayedText, setDisplayedText] = useState('');
  const [index, setIndex] = useState(0);
  const [dots, setDots] = useState('');

  useEffect(() => {
    if (index < children.length) {
      const timeoutId = setTimeout(() => {
        setDisplayedText(displayedText + children[index]);
        setIndex(index + 1);
      }, speed);
      return () => clearTimeout(timeoutId);
    }
  }, [index, children, displayedText, speed]);

  useEffect(() => {
    const dotInterval = setInterval(() => {
      setDots(prevDots => (prevDots.length < 3 ? prevDots + '.' : ''));
    }, dotSpeed);
    return () => clearInterval(dotInterval);
  }, [dotSpeed]);

  return (
    <div className="typing-markdown">
      <ReactMarkdown>{displayedText}</ReactMarkdown>
      {index < children.length && <span className="dots">{dots}</span>}
    </div>
  );
};

export default TypingMarkdown;


.typing-markdown {
  font-family: Arial, sans-serif;
  font-size: 16px;
  line-height: 1.5;
  display: flex;
  align-items: center;
}

.dots {
  font-size: 16px;
  line-height: 1.5;
}








import React, { useState, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import './styles.css'; // Import the CSS file for any additional styles

const TypingMarkdown = ({ children, speed = 50 }) => {
  const [displayedText, setDisplayedText] = useState('');
  const [index, setIndex] = useState(0);
  const [showDot, setShowDot] = useState(false);

  useEffect(() => {
    if (index < children.length) {
      const timeoutId = setTimeout(() => {
        setDisplayedText(displayedText + children[index]);
        setIndex(index + 1);
        setShowDot(true);
      }, speed);
      return () => clearTimeout(timeoutId);
    } else {
      setShowDot(false);
    }
  }, [index, children, displayedText, speed]);

  return (
    <div className="typing-markdown">
      <ReactMarkdown>{displayedText}</ReactMarkdown>
      {showDot && <span className="big-dot">â€¢</span>}
    </div>
  );
};

export default TypingMarkdown;



.typing-markdown {
  font-family: Arial, sans-serif;
  font-size: 16px;
  line-height: 1.5;
  display: inline-flex;
  align-items: center;
}

.big-dot {
  margin-left: 5px;
  font-size: 20px;
  line-height: 1.5;
  animation: blink 1s step-end infinite;
}

@keyframes blink {
  from, to {
    opacity: 1;
  }
  50% {
    opacity: 0;
  }
}

