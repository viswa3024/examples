<template>
  <transition appear name="fade">
    <div class="table-info">
      <div class="table-info__header">
        <slot name="columns">
          <div class="table-info__item">
            <div
              v-for="(column, key) in columns"
              :key="key"
              class="table-info__item__col"
            >
              <lazy-table-filtrable-column
                :column="column"
                :data="data"
                :filters="filters"
                v-if="column.filtrable"
                @applyFilters="onApplyFilters"
              />
              <button
                v-else-if="column.sortable"
                :data-title="column.tooltip"
                :class="[sortOrder, { active: sortedBy === column.field }]"
                @click="sort(column)"
              >
                <svgicon width="18" height="18" color="#4D4D4D" name="sort" />
                <span>{{ column.name }}</span>
              </button>
              <button v-else :data-title="column.tooltip">
                <span>{{ column.name }}</span>
              </button>
            </div>
          </div>
        </slot>
      </div>
      <results-empty v-if="tableIsEmpty" :title="emptySearchInfo.title" />
      <template v-else>
        <div class="table-info__body">
          <ul>
            <li
              v-for="item in paginatedResults"
              :key="String(item.id)"
            >
              <div class="table-info__item">
                <base-checkbox
                  v-if="globalActions"
                  v-model="item.selectedRecord"
                  class="list__item__checkbox"
                  :value="item.name"
                  @change="onCheckboxChanged($event, item.id)"
                />
                <span
                  v-for="(column, idx) in columns"
                  :key="idx"
                  class="table-info__item__col"
                >
                  <span :class="column.class">
                    <span v-if="column.type === 'action'">
                      <a
                        href="#"
                        @click.prevent="onActionClicked(item.kind, item)"
                        >{{ itemValue(item, column) }}</a>
                    </span>
                    <span v-else>{{ itemValue(item, column) }}</span>
                  </span>
                </span>
              </div>
            </li>
          </ul>
        </div>
        <div class="pagination-controls">
          <button
            :disabled="currentPage === 1"
            @click="currentPage--"
          >
            Previous
          </button>
          <span>Page {{ currentPage }} of {{ totalPages }}</span>
          <button
            :disabled="currentPage === totalPages"
            @click="currentPage++"
          >
            Next
          </button>
        </div>
      </template>
    </div>
  </transition>
</template>

<script>
export default {
  props: {
    data: {
      type: Array,
      default: () => [],
    },
    actions: Array,
    columns: Array,
    querySearch: String,
    activeFilters: Array,
    sortedOrder: String,
    sortedByField: String,
  },
  data() {
    return {
      currentPage: 1,
      itemsPerPage: 10, // Adjust the number of items per page as needed
      sortOrder: this.sortedOrder || "desc",
      sortedBy: this.sortedByField || null,
      filters: {},
    };
  },
  computed: {
    tableIsEmpty() {
      return this.filteredResults.length === 0;
    },
    totalPages() {
      return Math.ceil(this.filteredResults.length / this.itemsPerPage);
    },
    paginatedResults() {
      const start = (this.currentPage - 1) * this.itemsPerPage;
      const end = start + this.itemsPerPage;
      return this.filteredResults.slice(start, end);
    },
    filteredResults() {
      // Add filtering and sorting logic here
      const results = this.data; // Apply your actual filtering logic
      return results.sort((a, b) => {
        const modifier = this.sortOrder === "desc" ? -1 : 1;
        return a[this.sortedBy] < b[this.sortedBy]
          ? -1 * modifier
          : a[this.sortedBy] > b[this.sortedBy]
          ? 1 * modifier
          : 0;
      });
    },
  },
  methods: {
    sort(column) {
      this.sortedBy = column.field;
      this.sortOrder = this.sortOrder === "asc" ? "desc" : "asc";
      this.currentPage = 1; // Reset to first page when sorting
    },
  },
};
</script>

<style scoped>
.pagination-controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 1em;
}
</style>
