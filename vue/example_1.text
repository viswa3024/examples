<template>
  <transition appear name="fade">
    <div class="table-info">
      <div class="table-info__header">
        <slot name="columns">
          <div class="table-info__item">
            <div
              v-for="(column, key) in columns"
              :key="key"
              class="table-info__item__col"
            >
              <lazy-table-filtrable-column
                :column="column"
                :data="data"
                :filters="filters"
                v-if="column.filtrable"
                @applyFilters="onApplyFilters"
              />
              <button
                v-else-if="column.sortable"
                :data-title="column.tooltip"
                :class="[sortOrder, { active: sortedBy === column.field }]"
                @click="sort(column)"
              >
                <svgicon width="18" height="18" color="#4D4D4D" name="sort" />
                <span>{{ column.name }}</span>
              </button>
              <button v-else :data-title="column.tooltip">
                <span>{{ column.name }}</span>
              </button>
            </div>
          </div>
        </slot>
      </div>
      <results-empty v-if="tableIsEmpty" :title="emptySearchInfo.title" />
      <template v-else>
        <div class="table-info__body">
          <ul>
            <li v-for="item in paginatedResults" :key="String(item.id)">
              <div class="table-info__item">
                <!-- Item rendering code remains the same -->
                <span
                  v-for="(column, idx) in columns"
                  :key="idx"
                  class="table-info__item__col"
                >
                  <span :class="column.class">{{ itemValue(item, column) }}</span>
                </span>
              </div>
            </li>
          </ul>
          <div class="pagination">
            <button
              :disabled="currentPage === 1"
              @click="currentPage--"
              class="pagination-button"
            >
              Previous
            </button>
            <span>Page {{ currentPage }} of {{ totalPages }}</span>
            <button
              :disabled="currentPage === totalPages"
              @click="currentPage++"
              class="pagination-button"
            >
              Next
            </button>
          </div>
        </div>
      </template>
    </div>
  </transition>
</template>

<script>
export default {
  props: {
    data: {
      type: Array,
      default: () => [],
    },
    // Other props remain unchanged
  },
  data() {
    return {
      currentPage: 1,
      itemsPerPage: 10, // Change as needed
      sortOrder: this.sortedOrder,
      visibleActions: true,
      sortedBy: this.sortedByField,
      filters: {},
    };
  },
  computed: {
    tableIsEmpty() {
      return this.filteredResults.length === 0;
    },
    filteredResults() {
      // Filtering and sorting logic remains unchanged
      return this.data
        .filter((item) => this.matchSearch(item))
        .filter((item) => this.matchFilters(item))
        .sort(this.itemComparator);
    },
    paginatedResults() {
      const start = (this.currentPage - 1) * this.itemsPerPage;
      const end = start + this.itemsPerPage;
      return this.filteredResults.slice(start, end);
    },
    totalPages() {
      return Math.ceil(this.filteredResults.length / this.itemsPerPage);
    },
  },
  methods: {
    matchSearch(item) {
      if (!this.querySearch) return true;
      const query = this.querySearch.toLowerCase();
      return this.searchOn
        ? item[this.searchOn]?.toLowerCase().includes(query)
        : Object.values(item).some((val) =>
            val.toString().toLowerCase().includes(query)
          );
    },
    matchFilters(item) {
      // Filtering logic remains unchanged
      return Object.keys(this.filters).every((key) =>
        this.filters[key].includes(item[key])
      );
    },
    itemComparator(a, b) {
      // Sorting logic remains unchanged
      const modifier = this.sortOrder === "desc" ? -1 : 1;
      return a[this.sortedBy] < b[this.sortedBy]
        ? -1 * modifier
        : a[this.sortedBy] > b[this.sortedBy]
        ? 1 * modifier
        : 0;
    },
    sort(column) {
      // Sorting method remains unchanged
    },
  },
};
</script>

<style scoped>
.pagination {
  display: flex;
  justify-content: center;
  margin-top: 1em;
}
.pagination-button {
  margin: 0 0.5em;
  padding: 0.5em 1em;
  background-color: #f5f5f5;
  border: 1px solid #ccc;
  cursor: pointer;
}
.pagination-button:disabled {
  cursor: not-allowed;
  opacity: 0.5;
}
</style>
