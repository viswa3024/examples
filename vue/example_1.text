<template>
  <transition appear name="fade">
    <div class="table-info">
      <div class="table-info__header">
        <slot name="columns">
          <div class="table-info__item">
            <div
              v-for="(column, key) in columns"
              :key="key"
              class="table-info__item__col"
            >
              <lazy-table-filtrable-column
                :column="column"
                :data="paginatedResults"
                :filters="filters"
                v-if="column.filtrable"
                @applyFilters="onApplyFilters"
              />
              <button
                v-else-if="column.sortable"
                :data-title="column.tooltip"
                :class="[sortOrder, { active: sortedBy === column.field }]"
                @click="sort(column)"
              >
                <svgicon width="18" height="18" color="#4D4D4D" name="sort" />
                <span>{{ column.name }}</span>
              </button>
              <button v-else :data-title="column.tooltip">
                <span>{{ column.name }}</span>
              </button>
            </div>
          </div>
        </slot>
      </div>
      <results-empty v-if="tableIsEmpty" :title="emptySearchInfo.title" />
      <template v-else>
        <div class="table-info__body">
          <ul>
            <li v-for="item in paginatedResults" :key="String(item.id)">
              <div class="table-info__item">
                <base-checkbox
                  v-if="globalActions"
                  v-model="item.selectedRecord"
                  class="list__item__checkbox"
                  :value="item.name"
                  @change="onCheckboxChanged($event, item.id)"
                />
                <span
                  v-for="(column, idx) in columns"
                  :key="idx"
                  class="table-info__item__col"
                >
                  <span :class="column.class">
                    <a
                      v-if="column.type === 'action'"
                      href="#"
                      @click.prevent="onActionClicked(item.kind, item)"
                      >{{ itemValue(item, column) }}</a
                    >
                    <span v-else-if="column.type === 'link'">
                      <nuxt-link v-if="item.link" :to="item.link"
                        >{{ itemValue(item, column) }}</nuxt-link
                      >
                      <span v-else>{{ itemValue(item, column) }}</span>
                      <base-action-tooltip tooltip="Copied">
                        <base-button
                          title="Copy to clipboard"
                          class="table-info__actions__button button-icon"
                          @click.prevent="onActionClicked('copy-name', item)"
                        >
                          <svgicon name="copy" width="16" height="16" />
                        </base-button>
                      </base-action-tooltip>
                    </span>
                    <base-date
                      format="date-relative-now"
                      v-else-if="column.type === 'date'"
                      :date="itemValue(item, column)"
                    />
                    <span v-else-if="column.type === 'number'">
                      {{ itemValue(item, column) | formatNumber }}
                    </span>
                    <span
                      v-else-if="!isNaN(itemValue(item, column)) && column.type === 'percentage'"
                    >
                      {{ itemValue(item, column) | percent }}
                    </span>
                    <span v-else-if="column.type === 'array'">
                      <p
                        v-for="(arrayItem, index) in itemValue(item, column)"
                        :key="index"
                      >
                        {{ arrayItem
                        }}{{
                          index + 1 === itemValue(item, column).length ? "" : ","
                        }}
                      </p>
                    </span>
                    <span v-else-if="column.type === 'object'">
                      <p
                        v-for="key in Object.keys(itemValue(item, column))"
                        :key="key"
                      >
                        <strong>{{ key }}:</strong>
                        {{ itemValue(item, column)[key] }}
                      </p>
                    </span>
                    <span v-else>{{ itemValue(item, column) }}</span>
                  </span>
                </span>
                <div v-if="visibleActions" class="table-info__actions">
                  <base-action-tooltip
                    v-for="action in filterActions"
                    :key="action.index"
                    :tooltip="action.tooltip"
                  >
                    <base-button
                      :title="action.title"
                      class="table-info__actions__button button-icon"
                      @click="onActionClicked(action.name, item)"
                    >
                      <svgicon
                        v-if="action.icon !== undefined"
                        :name="action.icon"
                        width="16"
                        height="16"
                      />
                    </base-button>
                  </base-action-tooltip>
                </div>
              </div>
            </li>
          </ul>
        </div>
        <div class="pagination">
          <button
            :disabled="currentPage === 1"
            @click="changePage(currentPage - 1)"
          >
            Previous
          </button>
          <span>Page {{ currentPage }} of {{ totalPages }}</span>
          <button
            :disabled="currentPage === totalPages"
            @click="changePage(currentPage + 1)"
          >
            Next
          </button>
        </div>
      </template>
    </div>
  </transition>
</template>

<script>
export default {
  props: {
    data: {
      type: Array,
      default: () => [],
    },
    columns: Array,
    itemsPerPage: {
      type: Number,
      default: 10,
    },
  },
  data() {
    return {
      currentPage: 1,
    };
  },
  computed: {
    totalPages() {
      return Math.ceil(this.filteredResults.length / this.itemsPerPage);
    },
    paginatedResults() {
      const startIndex = (this.currentPage - 1) * this.itemsPerPage;
      const endIndex = startIndex + this.itemsPerPage;
      return this.filteredResults.slice(startIndex, endIndex);
    },
    filteredResults() {
      return this.data; // Your existing filtering logic goes here
    },
    tableIsEmpty() {
      return this.paginatedResults.length === 0;
    },
  },
  methods: {
    changePage(page) {
      if (page > 0 && page <= this.totalPages) {
        this.currentPage = page;
      }
    },
    itemValue(item, column) {
      if (column.subfield) {
        return item[column.field][column.subfield];
      }
      return item[column.field];
    },
    sort(column) {
      // Sorting logic
    },
  },
};
</script>

<style scoped>
.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 10px 0;
}
.pagination button {
  margin: 0 5px;
  padding: 5px 10px;
  border: 1px solid #ccc;
  background-color: #f9f9f9;
  cursor: pointer;
}
.pagination button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}
</style>
